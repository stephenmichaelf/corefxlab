// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// THIS FILE IS AUTOGENERATED

using System;
using System.Globalization;
using Xunit;

namespace System.Text.Formatting.Tests
{
    public partial class SystemTextFormattingTests
    {
        public void CheckByte(Byte value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void ByteFormatD()
        {
            
            // format D
            CheckByte(Byte.MinValue, "D");
            CheckByte(Byte.MaxValue, "D");
            CheckByte(0, "D");
            CheckByte(38, "D");
            CheckByte(60, "D");
            CheckByte(192, "D");
            CheckByte(0, "D");
            CheckByte(176, "D");
            
            // format D0
            CheckByte(Byte.MinValue, "D0");
            CheckByte(Byte.MaxValue, "D0");
            CheckByte(0, "D0");
            CheckByte(116, "D0");
            CheckByte(245, "D0");
            CheckByte(32, "D0");
            CheckByte(177, "D0");
            CheckByte(6, "D0");
            
            // format D1
            CheckByte(Byte.MinValue, "D1");
            CheckByte(Byte.MaxValue, "D1");
            CheckByte(0, "D1");
            CheckByte(5, "D1");
            CheckByte(46, "D1");
            CheckByte(21, "D1");
            CheckByte(184, "D1");
            CheckByte(243, "D1");
            
            // format D2
            CheckByte(Byte.MinValue, "D2");
            CheckByte(Byte.MaxValue, "D2");
            CheckByte(0, "D2");
            CheckByte(140, "D2");
            CheckByte(56, "D2");
            CheckByte(253, "D2");
            CheckByte(190, "D2");
            CheckByte(132, "D2");
            
            // format D3
            CheckByte(Byte.MinValue, "D3");
            CheckByte(Byte.MaxValue, "D3");
            CheckByte(0, "D3");
            CheckByte(175, "D3");
            CheckByte(47, "D3");
            CheckByte(254, "D3");
            CheckByte(96, "D3");
            CheckByte(179, "D3");
            
            // format D4
            CheckByte(Byte.MinValue, "D4");
            CheckByte(Byte.MaxValue, "D4");
            CheckByte(0, "D4");
            CheckByte(180, "D4");
            CheckByte(178, "D4");
            CheckByte(75, "D4");
            CheckByte(193, "D4");
            CheckByte(112, "D4");
            
            // format D5
            CheckByte(Byte.MinValue, "D5");
            CheckByte(Byte.MaxValue, "D5");
            CheckByte(0, "D5");
            CheckByte(93, "D5");
            CheckByte(219, "D5");
            CheckByte(107, "D5");
            CheckByte(15, "D5");
            CheckByte(209, "D5");
        }
        
        [Fact]
        public void ByteFormatd()
        {
            
            // format d
            CheckByte(Byte.MinValue, "d");
            CheckByte(Byte.MaxValue, "d");
            CheckByte(0, "d");
            CheckByte(25, "d");
            CheckByte(96, "d");
            CheckByte(224, "d");
            CheckByte(151, "d");
            CheckByte(193, "d");
            
            // format d0
            CheckByte(Byte.MinValue, "d0");
            CheckByte(Byte.MaxValue, "d0");
            CheckByte(0, "d0");
            CheckByte(51, "d0");
            CheckByte(137, "d0");
            CheckByte(67, "d0");
            CheckByte(111, "d0");
            CheckByte(36, "d0");
            
            // format d1
            CheckByte(Byte.MinValue, "d1");
            CheckByte(Byte.MaxValue, "d1");
            CheckByte(0, "d1");
            CheckByte(110, "d1");
            CheckByte(142, "d1");
            CheckByte(31, "d1");
            CheckByte(214, "d1");
            CheckByte(99, "d1");
            
            // format d2
            CheckByte(Byte.MinValue, "d2");
            CheckByte(Byte.MaxValue, "d2");
            CheckByte(0, "d2");
            CheckByte(150, "d2");
            CheckByte(106, "d2");
            CheckByte(96, "d2");
            CheckByte(54, "d2");
            CheckByte(108, "d2");
            
            // format d3
            CheckByte(Byte.MinValue, "d3");
            CheckByte(Byte.MaxValue, "d3");
            CheckByte(0, "d3");
            CheckByte(246, "d3");
            CheckByte(60, "d3");
            CheckByte(96, "d3");
            CheckByte(75, "d3");
            CheckByte(250, "d3");
            
            // format d4
            CheckByte(Byte.MinValue, "d4");
            CheckByte(Byte.MaxValue, "d4");
            CheckByte(0, "d4");
            CheckByte(193, "d4");
            CheckByte(170, "d4");
            CheckByte(93, "d4");
            CheckByte(64, "d4");
            CheckByte(168, "d4");
            
            // format d5
            CheckByte(Byte.MinValue, "d5");
            CheckByte(Byte.MaxValue, "d5");
            CheckByte(0, "d5");
            CheckByte(41, "d5");
            CheckByte(193, "d5");
            CheckByte(6, "d5");
            CheckByte(230, "d5");
            CheckByte(217, "d5");
        }
        
        [Fact]
        public void ByteFormatG()
        {
            
            // format G
            CheckByte(Byte.MinValue, "G");
            CheckByte(Byte.MaxValue, "G");
            CheckByte(0, "G");
            CheckByte(43, "G");
            CheckByte(87, "G");
            CheckByte(101, "G");
            CheckByte(251, "G");
            CheckByte(81, "G");
        }
        
        [Fact]
        public void ByteFormatN()
        {
            
            // format N
            CheckByte(Byte.MinValue, "N");
            CheckByte(Byte.MaxValue, "N");
            CheckByte(0, "N");
            CheckByte(37, "N");
            CheckByte(234, "N");
            CheckByte(142, "N");
            CheckByte(60, "N");
            CheckByte(69, "N");
            
            // format N0
            CheckByte(Byte.MinValue, "N0");
            CheckByte(Byte.MaxValue, "N0");
            CheckByte(0, "N0");
            CheckByte(38, "N0");
            CheckByte(146, "N0");
            CheckByte(116, "N0");
            CheckByte(94, "N0");
            CheckByte(217, "N0");
            
            // format N1
            CheckByte(Byte.MinValue, "N1");
            CheckByte(Byte.MaxValue, "N1");
            CheckByte(0, "N1");
            CheckByte(241, "N1");
            CheckByte(123, "N1");
            CheckByte(52, "N1");
            CheckByte(161, "N1");
            CheckByte(217, "N1");
            
            // format N2
            CheckByte(Byte.MinValue, "N2");
            CheckByte(Byte.MaxValue, "N2");
            CheckByte(0, "N2");
            CheckByte(219, "N2");
            CheckByte(0, "N2");
            CheckByte(149, "N2");
            CheckByte(156, "N2");
            CheckByte(0, "N2");
            
            // format N3
            CheckByte(Byte.MinValue, "N3");
            CheckByte(Byte.MaxValue, "N3");
            CheckByte(0, "N3");
            CheckByte(136, "N3");
            CheckByte(44, "N3");
            CheckByte(3, "N3");
            CheckByte(198, "N3");
            CheckByte(250, "N3");
            
            // format N4
            CheckByte(Byte.MinValue, "N4");
            CheckByte(Byte.MaxValue, "N4");
            CheckByte(0, "N4");
            CheckByte(171, "N4");
            CheckByte(136, "N4");
            CheckByte(56, "N4");
            CheckByte(251, "N4");
            CheckByte(55, "N4");
            
            // format N5
            CheckByte(Byte.MinValue, "N5");
            CheckByte(Byte.MaxValue, "N5");
            CheckByte(0, "N5");
            CheckByte(63, "N5");
            CheckByte(4, "N5");
            CheckByte(99, "N5");
            CheckByte(228, "N5");
            CheckByte(70, "N5");
        }
        
        [Fact]
        public void ByteFormatR()
        {
            
            // format R
            CheckByte(Byte.MinValue, "R");
            CheckByte(Byte.MaxValue, "R");
            CheckByte(0, "R");
            CheckByte(12, "R");
            CheckByte(173, "R");
            CheckByte(36, "R");
            CheckByte(6, "R");
            CheckByte(212, "R");
            
            // format R0
            CheckByte(Byte.MinValue, "R0");
            CheckByte(Byte.MaxValue, "R0");
            CheckByte(0, "R0");
            CheckByte(46, "R0");
            CheckByte(54, "R0");
            CheckByte(254, "R0");
            CheckByte(102, "R0");
            CheckByte(182, "R0");
            
            // format R1
            CheckByte(Byte.MinValue, "R1");
            CheckByte(Byte.MaxValue, "R1");
            CheckByte(0, "R1");
            CheckByte(173, "R1");
            CheckByte(141, "R1");
            CheckByte(99, "R1");
            CheckByte(12, "R1");
            CheckByte(252, "R1");
            
            // format R2
            CheckByte(Byte.MinValue, "R2");
            CheckByte(Byte.MaxValue, "R2");
            CheckByte(0, "R2");
            CheckByte(43, "R2");
            CheckByte(193, "R2");
            CheckByte(200, "R2");
            CheckByte(250, "R2");
            CheckByte(200, "R2");
            
            // format R3
            CheckByte(Byte.MinValue, "R3");
            CheckByte(Byte.MaxValue, "R3");
            CheckByte(0, "R3");
            CheckByte(248, "R3");
            CheckByte(231, "R3");
            CheckByte(199, "R3");
            CheckByte(64, "R3");
            CheckByte(152, "R3");
            
            // format R4
            CheckByte(Byte.MinValue, "R4");
            CheckByte(Byte.MaxValue, "R4");
            CheckByte(0, "R4");
            CheckByte(157, "R4");
            CheckByte(90, "R4");
            CheckByte(119, "R4");
            CheckByte(38, "R4");
            CheckByte(153, "R4");
            
            // format R5
            CheckByte(Byte.MinValue, "R5");
            CheckByte(Byte.MaxValue, "R5");
            CheckByte(0, "R5");
            CheckByte(236, "R5");
            CheckByte(23, "R5");
            CheckByte(78, "R5");
            CheckByte(91, "R5");
            CheckByte(205, "R5");
        }
        
        [Fact]
        public void ByteFormatX()
        {
            
            // format X
            CheckByte(Byte.MinValue, "X");
            CheckByte(Byte.MaxValue, "X");
            CheckByte(0, "X");
            CheckByte(46, "X");
            CheckByte(219, "X");
            CheckByte(142, "X");
            CheckByte(199, "X");
            CheckByte(209, "X");
            
            // format X0
            CheckByte(Byte.MinValue, "X0");
            CheckByte(Byte.MaxValue, "X0");
            CheckByte(0, "X0");
            CheckByte(82, "X0");
            CheckByte(44, "X0");
            CheckByte(155, "X0");
            CheckByte(16, "X0");
            CheckByte(76, "X0");
            
            // format X1
            CheckByte(Byte.MinValue, "X1");
            CheckByte(Byte.MaxValue, "X1");
            CheckByte(0, "X1");
            CheckByte(30, "X1");
            CheckByte(36, "X1");
            CheckByte(43, "X1");
            CheckByte(254, "X1");
            CheckByte(12, "X1");
            
            // format X2
            CheckByte(Byte.MinValue, "X2");
            CheckByte(Byte.MaxValue, "X2");
            CheckByte(0, "X2");
            CheckByte(125, "X2");
            CheckByte(59, "X2");
            CheckByte(103, "X2");
            CheckByte(28, "X2");
            CheckByte(77, "X2");
            
            // format X3
            CheckByte(Byte.MinValue, "X3");
            CheckByte(Byte.MaxValue, "X3");
            CheckByte(0, "X3");
            CheckByte(35, "X3");
            CheckByte(228, "X3");
            CheckByte(226, "X3");
            CheckByte(109, "X3");
            CheckByte(54, "X3");
            
            // format X4
            CheckByte(Byte.MinValue, "X4");
            CheckByte(Byte.MaxValue, "X4");
            CheckByte(0, "X4");
            CheckByte(210, "X4");
            CheckByte(189, "X4");
            CheckByte(216, "X4");
            CheckByte(203, "X4");
            CheckByte(200, "X4");
            
            // format X5
            CheckByte(Byte.MinValue, "X5");
            CheckByte(Byte.MaxValue, "X5");
            CheckByte(0, "X5");
            CheckByte(149, "X5");
            CheckByte(62, "X5");
            CheckByte(8, "X5");
            CheckByte(61, "X5");
            CheckByte(206, "X5");
        }
        
        [Fact]
        public void ByteFormatx()
        {
            
            // format x
            CheckByte(Byte.MinValue, "x");
            CheckByte(Byte.MaxValue, "x");
            CheckByte(0, "x");
            CheckByte(78, "x");
            CheckByte(50, "x");
            CheckByte(1, "x");
            CheckByte(41, "x");
            CheckByte(117, "x");
            
            // format x0
            CheckByte(Byte.MinValue, "x0");
            CheckByte(Byte.MaxValue, "x0");
            CheckByte(0, "x0");
            CheckByte(203, "x0");
            CheckByte(75, "x0");
            CheckByte(183, "x0");
            CheckByte(243, "x0");
            CheckByte(121, "x0");
            
            // format x1
            CheckByte(Byte.MinValue, "x1");
            CheckByte(Byte.MaxValue, "x1");
            CheckByte(0, "x1");
            CheckByte(120, "x1");
            CheckByte(47, "x1");
            CheckByte(120, "x1");
            CheckByte(25, "x1");
            CheckByte(28, "x1");
            
            // format x2
            CheckByte(Byte.MinValue, "x2");
            CheckByte(Byte.MaxValue, "x2");
            CheckByte(0, "x2");
            CheckByte(176, "x2");
            CheckByte(175, "x2");
            CheckByte(50, "x2");
            CheckByte(14, "x2");
            CheckByte(169, "x2");
            
            // format x3
            CheckByte(Byte.MinValue, "x3");
            CheckByte(Byte.MaxValue, "x3");
            CheckByte(0, "x3");
            CheckByte(72, "x3");
            CheckByte(248, "x3");
            CheckByte(33, "x3");
            CheckByte(144, "x3");
            CheckByte(253, "x3");
            
            // format x4
            CheckByte(Byte.MinValue, "x4");
            CheckByte(Byte.MaxValue, "x4");
            CheckByte(0, "x4");
            CheckByte(147, "x4");
            CheckByte(83, "x4");
            CheckByte(206, "x4");
            CheckByte(70, "x4");
            CheckByte(182, "x4");
            
            // format x5
            CheckByte(Byte.MinValue, "x5");
            CheckByte(Byte.MaxValue, "x5");
            CheckByte(0, "x5");
            CheckByte(223, "x5");
            CheckByte(28, "x5");
            CheckByte(236, "x5");
            CheckByte(47, "x5");
            CheckByte(188, "x5");
        }
        
        public void CheckSByte(SByte value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void SByteFormatD()
        {
            
            // format D
            CheckSByte(SByte.MinValue, "D");
            CheckSByte(SByte.MaxValue, "D");
            CheckSByte(0, "D");
            CheckSByte(-54, "D");
            CheckSByte(-71, "D");
            CheckSByte(-67, "D");
            CheckSByte(37, "D");
            CheckSByte(0, "D");
            
            // format D0
            CheckSByte(SByte.MinValue, "D0");
            CheckSByte(SByte.MaxValue, "D0");
            CheckSByte(0, "D0");
            CheckSByte(87, "D0");
            CheckSByte(-83, "D0");
            CheckSByte(110, "D0");
            CheckSByte(114, "D0");
            CheckSByte(61, "D0");
            
            // format D1
            CheckSByte(SByte.MinValue, "D1");
            CheckSByte(SByte.MaxValue, "D1");
            CheckSByte(0, "D1");
            CheckSByte(35, "D1");
            CheckSByte(-59, "D1");
            CheckSByte(62, "D1");
            CheckSByte(46, "D1");
            CheckSByte(-104, "D1");
            
            // format D2
            CheckSByte(SByte.MinValue, "D2");
            CheckSByte(SByte.MaxValue, "D2");
            CheckSByte(0, "D2");
            CheckSByte(101, "D2");
            CheckSByte(-117, "D2");
            CheckSByte(121, "D2");
            CheckSByte(18, "D2");
            CheckSByte(5, "D2");
            
            // format D3
            CheckSByte(SByte.MinValue, "D3");
            CheckSByte(SByte.MaxValue, "D3");
            CheckSByte(0, "D3");
            CheckSByte(-43, "D3");
            CheckSByte(-112, "D3");
            CheckSByte(-16, "D3");
            CheckSByte(-86, "D3");
            CheckSByte(97, "D3");
            
            // format D4
            CheckSByte(SByte.MinValue, "D4");
            CheckSByte(SByte.MaxValue, "D4");
            CheckSByte(0, "D4");
            CheckSByte(-8, "D4");
            CheckSByte(-5, "D4");
            CheckSByte(-15, "D4");
            CheckSByte(-68, "D4");
            CheckSByte(25, "D4");
            
            // format D5
            CheckSByte(SByte.MinValue, "D5");
            CheckSByte(SByte.MaxValue, "D5");
            CheckSByte(0, "D5");
            CheckSByte(-36, "D5");
            CheckSByte(-63, "D5");
            CheckSByte(-56, "D5");
            CheckSByte(-37, "D5");
            CheckSByte(80, "D5");
        }
        
        [Fact]
        public void SByteFormatd()
        {
            
            // format d
            CheckSByte(SByte.MinValue, "d");
            CheckSByte(SByte.MaxValue, "d");
            CheckSByte(0, "d");
            CheckSByte(-9, "d");
            CheckSByte(-15, "d");
            CheckSByte(11, "d");
            CheckSByte(12, "d");
            CheckSByte(81, "d");
            
            // format d0
            CheckSByte(SByte.MinValue, "d0");
            CheckSByte(SByte.MaxValue, "d0");
            CheckSByte(0, "d0");
            CheckSByte(-102, "d0");
            CheckSByte(-119, "d0");
            CheckSByte(-82, "d0");
            CheckSByte(82, "d0");
            CheckSByte(-38, "d0");
            
            // format d1
            CheckSByte(SByte.MinValue, "d1");
            CheckSByte(SByte.MaxValue, "d1");
            CheckSByte(0, "d1");
            CheckSByte(-51, "d1");
            CheckSByte(19, "d1");
            CheckSByte(-97, "d1");
            CheckSByte(-82, "d1");
            CheckSByte(79, "d1");
            
            // format d2
            CheckSByte(SByte.MinValue, "d2");
            CheckSByte(SByte.MaxValue, "d2");
            CheckSByte(0, "d2");
            CheckSByte(83, "d2");
            CheckSByte(-94, "d2");
            CheckSByte(-39, "d2");
            CheckSByte(41, "d2");
            CheckSByte(-26, "d2");
            
            // format d3
            CheckSByte(SByte.MinValue, "d3");
            CheckSByte(SByte.MaxValue, "d3");
            CheckSByte(0, "d3");
            CheckSByte(-70, "d3");
            CheckSByte(72, "d3");
            CheckSByte(-109, "d3");
            CheckSByte(66, "d3");
            CheckSByte(-120, "d3");
            
            // format d4
            CheckSByte(SByte.MinValue, "d4");
            CheckSByte(SByte.MaxValue, "d4");
            CheckSByte(0, "d4");
            CheckSByte(-37, "d4");
            CheckSByte(59, "d4");
            CheckSByte(49, "d4");
            CheckSByte(-40, "d4");
            CheckSByte(-31, "d4");
            
            // format d5
            CheckSByte(SByte.MinValue, "d5");
            CheckSByte(SByte.MaxValue, "d5");
            CheckSByte(0, "d5");
            CheckSByte(-31, "d5");
            CheckSByte(124, "d5");
            CheckSByte(-30, "d5");
            CheckSByte(92, "d5");
            CheckSByte(31, "d5");
        }
        
        [Fact]
        public void SByteFormatG()
        {
            
            // format G
            CheckSByte(SByte.MinValue, "G");
            CheckSByte(SByte.MaxValue, "G");
            CheckSByte(0, "G");
            CheckSByte(-12, "G");
            CheckSByte(-1, "G");
            CheckSByte(-20, "G");
            CheckSByte(64, "G");
            CheckSByte(-22, "G");
        }
        
        [Fact]
        public void SByteFormatN()
        {
            
            // format N
            CheckSByte(SByte.MinValue, "N");
            CheckSByte(SByte.MaxValue, "N");
            CheckSByte(0, "N");
            CheckSByte(-53, "N");
            CheckSByte(97, "N");
            CheckSByte(29, "N");
            CheckSByte(79, "N");
            CheckSByte(20, "N");
            
            // format N0
            CheckSByte(SByte.MinValue, "N0");
            CheckSByte(SByte.MaxValue, "N0");
            CheckSByte(0, "N0");
            CheckSByte(99, "N0");
            CheckSByte(-36, "N0");
            CheckSByte(-61, "N0");
            CheckSByte(-20, "N0");
            CheckSByte(69, "N0");
            
            // format N1
            CheckSByte(SByte.MinValue, "N1");
            CheckSByte(SByte.MaxValue, "N1");
            CheckSByte(0, "N1");
            CheckSByte(-71, "N1");
            CheckSByte(102, "N1");
            CheckSByte(30, "N1");
            CheckSByte(115, "N1");
            CheckSByte(22, "N1");
            
            // format N2
            CheckSByte(SByte.MinValue, "N2");
            CheckSByte(SByte.MaxValue, "N2");
            CheckSByte(0, "N2");
            CheckSByte(45, "N2");
            CheckSByte(-35, "N2");
            CheckSByte(72, "N2");
            CheckSByte(4, "N2");
            CheckSByte(-10, "N2");
            
            // format N3
            CheckSByte(SByte.MinValue, "N3");
            CheckSByte(SByte.MaxValue, "N3");
            CheckSByte(0, "N3");
            CheckSByte(-34, "N3");
            CheckSByte(-41, "N3");
            CheckSByte(84, "N3");
            CheckSByte(-15, "N3");
            CheckSByte(119, "N3");
            
            // format N4
            CheckSByte(SByte.MinValue, "N4");
            CheckSByte(SByte.MaxValue, "N4");
            CheckSByte(0, "N4");
            CheckSByte(-48, "N4");
            CheckSByte(-79, "N4");
            CheckSByte(-63, "N4");
            CheckSByte(13, "N4");
            CheckSByte(-38, "N4");
            
            // format N5
            CheckSByte(SByte.MinValue, "N5");
            CheckSByte(SByte.MaxValue, "N5");
            CheckSByte(0, "N5");
            CheckSByte(-44, "N5");
            CheckSByte(53, "N5");
            CheckSByte(24, "N5");
            CheckSByte(-66, "N5");
            CheckSByte(-101, "N5");
        }
        
        [Fact]
        public void SByteFormatR()
        {
            
            // format R
            CheckSByte(SByte.MinValue, "R");
            CheckSByte(SByte.MaxValue, "R");
            CheckSByte(0, "R");
            CheckSByte(-41, "R");
            CheckSByte(-85, "R");
            CheckSByte(-62, "R");
            CheckSByte(-82, "R");
            CheckSByte(-93, "R");
            
            // format R0
            CheckSByte(SByte.MinValue, "R0");
            CheckSByte(SByte.MaxValue, "R0");
            CheckSByte(0, "R0");
            CheckSByte(126, "R0");
            CheckSByte(-8, "R0");
            CheckSByte(-60, "R0");
            CheckSByte(18, "R0");
            CheckSByte(-89, "R0");
            
            // format R1
            CheckSByte(SByte.MinValue, "R1");
            CheckSByte(SByte.MaxValue, "R1");
            CheckSByte(0, "R1");
            CheckSByte(-6, "R1");
            CheckSByte(-34, "R1");
            CheckSByte(-18, "R1");
            CheckSByte(-58, "R1");
            CheckSByte(113, "R1");
            
            // format R2
            CheckSByte(SByte.MinValue, "R2");
            CheckSByte(SByte.MaxValue, "R2");
            CheckSByte(0, "R2");
            CheckSByte(-106, "R2");
            CheckSByte(54, "R2");
            CheckSByte(102, "R2");
            CheckSByte(-55, "R2");
            CheckSByte(-116, "R2");
            
            // format R3
            CheckSByte(SByte.MinValue, "R3");
            CheckSByte(SByte.MaxValue, "R3");
            CheckSByte(0, "R3");
            CheckSByte(115, "R3");
            CheckSByte(-116, "R3");
            CheckSByte(-84, "R3");
            CheckSByte(86, "R3");
            CheckSByte(-60, "R3");
            
            // format R4
            CheckSByte(SByte.MinValue, "R4");
            CheckSByte(SByte.MaxValue, "R4");
            CheckSByte(0, "R4");
            CheckSByte(50, "R4");
            CheckSByte(-102, "R4");
            CheckSByte(52, "R4");
            CheckSByte(-111, "R4");
            CheckSByte(-15, "R4");
            
            // format R5
            CheckSByte(SByte.MinValue, "R5");
            CheckSByte(SByte.MaxValue, "R5");
            CheckSByte(0, "R5");
            CheckSByte(3, "R5");
            CheckSByte(-51, "R5");
            CheckSByte(-33, "R5");
            CheckSByte(88, "R5");
            CheckSByte(-66, "R5");
        }
        
        [Fact]
        public void SByteFormatX()
        {
            
            // format X
            CheckSByte(SByte.MinValue, "X");
            CheckSByte(SByte.MaxValue, "X");
            CheckSByte(0, "X");
            CheckSByte(2, "X");
            CheckSByte(-102, "X");
            CheckSByte(25, "X");
            CheckSByte(-32, "X");
            CheckSByte(-9, "X");
            
            // format X0
            CheckSByte(SByte.MinValue, "X0");
            CheckSByte(SByte.MaxValue, "X0");
            CheckSByte(0, "X0");
            CheckSByte(100, "X0");
            CheckSByte(-110, "X0");
            CheckSByte(-63, "X0");
            CheckSByte(-55, "X0");
            CheckSByte(-3, "X0");
            
            // format X1
            CheckSByte(SByte.MinValue, "X1");
            CheckSByte(SByte.MaxValue, "X1");
            CheckSByte(0, "X1");
            CheckSByte(112, "X1");
            CheckSByte(66, "X1");
            CheckSByte(122, "X1");
            CheckSByte(26, "X1");
            CheckSByte(-60, "X1");
            
            // format X2
            CheckSByte(SByte.MinValue, "X2");
            CheckSByte(SByte.MaxValue, "X2");
            CheckSByte(0, "X2");
            CheckSByte(29, "X2");
            CheckSByte(77, "X2");
            CheckSByte(-49, "X2");
            CheckSByte(-78, "X2");
            CheckSByte(-90, "X2");
            
            // format X3
            CheckSByte(SByte.MinValue, "X3");
            CheckSByte(SByte.MaxValue, "X3");
            CheckSByte(0, "X3");
            CheckSByte(-53, "X3");
            CheckSByte(126, "X3");
            CheckSByte(-21, "X3");
            CheckSByte(105, "X3");
            CheckSByte(-16, "X3");
            
            // format X4
            CheckSByte(SByte.MinValue, "X4");
            CheckSByte(SByte.MaxValue, "X4");
            CheckSByte(0, "X4");
            CheckSByte(99, "X4");
            CheckSByte(66, "X4");
            CheckSByte(-77, "X4");
            CheckSByte(-95, "X4");
            CheckSByte(34, "X4");
            
            // format X5
            CheckSByte(SByte.MinValue, "X5");
            CheckSByte(SByte.MaxValue, "X5");
            CheckSByte(0, "X5");
            CheckSByte(-84, "X5");
            CheckSByte(126, "X5");
            CheckSByte(20, "X5");
            CheckSByte(-121, "X5");
            CheckSByte(-17, "X5");
        }
        
        [Fact]
        public void SByteFormatx()
        {
            
            // format x
            CheckSByte(SByte.MinValue, "x");
            CheckSByte(SByte.MaxValue, "x");
            CheckSByte(0, "x");
            CheckSByte(122, "x");
            CheckSByte(-100, "x");
            CheckSByte(5, "x");
            CheckSByte(80, "x");
            CheckSByte(-90, "x");
            
            // format x0
            CheckSByte(SByte.MinValue, "x0");
            CheckSByte(SByte.MaxValue, "x0");
            CheckSByte(0, "x0");
            CheckSByte(96, "x0");
            CheckSByte(73, "x0");
            CheckSByte(97, "x0");
            CheckSByte(-40, "x0");
            CheckSByte(-46, "x0");
            
            // format x1
            CheckSByte(SByte.MinValue, "x1");
            CheckSByte(SByte.MaxValue, "x1");
            CheckSByte(0, "x1");
            CheckSByte(111, "x1");
            CheckSByte(-98, "x1");
            CheckSByte(-102, "x1");
            CheckSByte(76, "x1");
            CheckSByte(83, "x1");
            
            // format x2
            CheckSByte(SByte.MinValue, "x2");
            CheckSByte(SByte.MaxValue, "x2");
            CheckSByte(0, "x2");
            CheckSByte(53, "x2");
            CheckSByte(125, "x2");
            CheckSByte(-84, "x2");
            CheckSByte(50, "x2");
            CheckSByte(114, "x2");
            
            // format x3
            CheckSByte(SByte.MinValue, "x3");
            CheckSByte(SByte.MaxValue, "x3");
            CheckSByte(0, "x3");
            CheckSByte(2, "x3");
            CheckSByte(46, "x3");
            CheckSByte(47, "x3");
            CheckSByte(111, "x3");
            CheckSByte(18, "x3");
            
            // format x4
            CheckSByte(SByte.MinValue, "x4");
            CheckSByte(SByte.MaxValue, "x4");
            CheckSByte(0, "x4");
            CheckSByte(-94, "x4");
            CheckSByte(94, "x4");
            CheckSByte(-96, "x4");
            CheckSByte(38, "x4");
            CheckSByte(-47, "x4");
            
            // format x5
            CheckSByte(SByte.MinValue, "x5");
            CheckSByte(SByte.MaxValue, "x5");
            CheckSByte(0, "x5");
            CheckSByte(113, "x5");
            CheckSByte(-83, "x5");
            CheckSByte(115, "x5");
            CheckSByte(-85, "x5");
            CheckSByte(-56, "x5");
        }
        
        public void CheckUInt16(UInt16 value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt16FormatD()
        {
            
            // format D
            CheckUInt16(UInt16.MinValue, "D");
            CheckUInt16(UInt16.MaxValue, "D");
            CheckUInt16(0, "D");
            CheckUInt16(33006, "D");
            CheckUInt16(18405, "D");
            CheckUInt16(32181, "D");
            CheckUInt16(3143, "D");
            CheckUInt16(17757, "D");
            
            // format D0
            CheckUInt16(UInt16.MinValue, "D0");
            CheckUInt16(UInt16.MaxValue, "D0");
            CheckUInt16(0, "D0");
            CheckUInt16(33041, "D0");
            CheckUInt16(7486, "D0");
            CheckUInt16(4978, "D0");
            CheckUInt16(38725, "D0");
            CheckUInt16(33088, "D0");
            
            // format D1
            CheckUInt16(UInt16.MinValue, "D1");
            CheckUInt16(UInt16.MaxValue, "D1");
            CheckUInt16(0, "D1");
            CheckUInt16(50740, "D1");
            CheckUInt16(43300, "D1");
            CheckUInt16(26131, "D1");
            CheckUInt16(19850, "D1");
            CheckUInt16(60701, "D1");
            
            // format D2
            CheckUInt16(UInt16.MinValue, "D2");
            CheckUInt16(UInt16.MaxValue, "D2");
            CheckUInt16(0, "D2");
            CheckUInt16(11648, "D2");
            CheckUInt16(53737, "D2");
            CheckUInt16(57885, "D2");
            CheckUInt16(5089, "D2");
            CheckUInt16(60456, "D2");
            
            // format D3
            CheckUInt16(UInt16.MinValue, "D3");
            CheckUInt16(UInt16.MaxValue, "D3");
            CheckUInt16(0, "D3");
            CheckUInt16(19647, "D3");
            CheckUInt16(27869, "D3");
            CheckUInt16(38471, "D3");
            CheckUInt16(15979, "D3");
            CheckUInt16(984, "D3");
            
            // format D4
            CheckUInt16(UInt16.MinValue, "D4");
            CheckUInt16(UInt16.MaxValue, "D4");
            CheckUInt16(0, "D4");
            CheckUInt16(448, "D4");
            CheckUInt16(43467, "D4");
            CheckUInt16(15194, "D4");
            CheckUInt16(1678, "D4");
            CheckUInt16(24682, "D4");
            
            // format D5
            CheckUInt16(UInt16.MinValue, "D5");
            CheckUInt16(UInt16.MaxValue, "D5");
            CheckUInt16(0, "D5");
            CheckUInt16(49692, "D5");
            CheckUInt16(10776, "D5");
            CheckUInt16(60989, "D5");
            CheckUInt16(33901, "D5");
            CheckUInt16(21256, "D5");
        }
        
        [Fact]
        public void UInt16Formatd()
        {
            
            // format d
            CheckUInt16(UInt16.MinValue, "d");
            CheckUInt16(UInt16.MaxValue, "d");
            CheckUInt16(0, "d");
            CheckUInt16(28207, "d");
            CheckUInt16(33036, "d");
            CheckUInt16(8405, "d");
            CheckUInt16(28021, "d");
            CheckUInt16(29287, "d");
            
            // format d0
            CheckUInt16(UInt16.MinValue, "d0");
            CheckUInt16(UInt16.MaxValue, "d0");
            CheckUInt16(0, "d0");
            CheckUInt16(26133, "d0");
            CheckUInt16(39802, "d0");
            CheckUInt16(6292, "d0");
            CheckUInt16(28352, "d0");
            CheckUInt16(52514, "d0");
            
            // format d1
            CheckUInt16(UInt16.MinValue, "d1");
            CheckUInt16(UInt16.MaxValue, "d1");
            CheckUInt16(0, "d1");
            CheckUInt16(31071, "d1");
            CheckUInt16(31120, "d1");
            CheckUInt16(54061, "d1");
            CheckUInt16(47536, "d1");
            CheckUInt16(9377, "d1");
            
            // format d2
            CheckUInt16(UInt16.MinValue, "d2");
            CheckUInt16(UInt16.MaxValue, "d2");
            CheckUInt16(0, "d2");
            CheckUInt16(8349, "d2");
            CheckUInt16(19389, "d2");
            CheckUInt16(57480, "d2");
            CheckUInt16(16328, "d2");
            CheckUInt16(64522, "d2");
            
            // format d3
            CheckUInt16(UInt16.MinValue, "d3");
            CheckUInt16(UInt16.MaxValue, "d3");
            CheckUInt16(0, "d3");
            CheckUInt16(5136, "d3");
            CheckUInt16(45469, "d3");
            CheckUInt16(16202, "d3");
            CheckUInt16(2158, "d3");
            CheckUInt16(17309, "d3");
            
            // format d4
            CheckUInt16(UInt16.MinValue, "d4");
            CheckUInt16(UInt16.MaxValue, "d4");
            CheckUInt16(0, "d4");
            CheckUInt16(55108, "d4");
            CheckUInt16(57827, "d4");
            CheckUInt16(3300, "d4");
            CheckUInt16(14043, "d4");
            CheckUInt16(48931, "d4");
            
            // format d5
            CheckUInt16(UInt16.MinValue, "d5");
            CheckUInt16(UInt16.MaxValue, "d5");
            CheckUInt16(0, "d5");
            CheckUInt16(39964, "d5");
            CheckUInt16(47846, "d5");
            CheckUInt16(57765, "d5");
            CheckUInt16(64128, "d5");
            CheckUInt16(32494, "d5");
        }
        
        [Fact]
        public void UInt16FormatG()
        {
            
            // format G
            CheckUInt16(UInt16.MinValue, "G");
            CheckUInt16(UInt16.MaxValue, "G");
            CheckUInt16(0, "G");
            CheckUInt16(44146, "G");
            CheckUInt16(45331, "G");
            CheckUInt16(29864, "G");
            CheckUInt16(41337, "G");
            CheckUInt16(34323, "G");
        }
        
        [Fact]
        public void UInt16FormatN()
        {
            
            // format N
            CheckUInt16(UInt16.MinValue, "N");
            CheckUInt16(UInt16.MaxValue, "N");
            CheckUInt16(0, "N");
            CheckUInt16(45380, "N");
            CheckUInt16(21577, "N");
            CheckUInt16(10118, "N");
            CheckUInt16(28999, "N");
            CheckUInt16(35448, "N");
            
            // format N0
            CheckUInt16(UInt16.MinValue, "N0");
            CheckUInt16(UInt16.MaxValue, "N0");
            CheckUInt16(0, "N0");
            CheckUInt16(34863, "N0");
            CheckUInt16(54941, "N0");
            CheckUInt16(33193, "N0");
            CheckUInt16(57836, "N0");
            CheckUInt16(16332, "N0");
            
            // format N1
            CheckUInt16(UInt16.MinValue, "N1");
            CheckUInt16(UInt16.MaxValue, "N1");
            CheckUInt16(0, "N1");
            CheckUInt16(30302, "N1");
            CheckUInt16(18830, "N1");
            CheckUInt16(44661, "N1");
            CheckUInt16(34913, "N1");
            CheckUInt16(16120, "N1");
            
            // format N2
            CheckUInt16(UInt16.MinValue, "N2");
            CheckUInt16(UInt16.MaxValue, "N2");
            CheckUInt16(0, "N2");
            CheckUInt16(48273, "N2");
            CheckUInt16(16834, "N2");
            CheckUInt16(6246, "N2");
            CheckUInt16(10711, "N2");
            CheckUInt16(39713, "N2");
            
            // format N3
            CheckUInt16(UInt16.MinValue, "N3");
            CheckUInt16(UInt16.MaxValue, "N3");
            CheckUInt16(0, "N3");
            CheckUInt16(33841, "N3");
            CheckUInt16(36502, "N3");
            CheckUInt16(57783, "N3");
            CheckUInt16(44956, "N3");
            CheckUInt16(12550, "N3");
            
            // format N4
            CheckUInt16(UInt16.MinValue, "N4");
            CheckUInt16(UInt16.MaxValue, "N4");
            CheckUInt16(0, "N4");
            CheckUInt16(48760, "N4");
            CheckUInt16(38889, "N4");
            CheckUInt16(55467, "N4");
            CheckUInt16(15041, "N4");
            CheckUInt16(30765, "N4");
            
            // format N5
            CheckUInt16(UInt16.MinValue, "N5");
            CheckUInt16(UInt16.MaxValue, "N5");
            CheckUInt16(0, "N5");
            CheckUInt16(28553, "N5");
            CheckUInt16(55060, "N5");
            CheckUInt16(16142, "N5");
            CheckUInt16(47540, "N5");
            CheckUInt16(19142, "N5");
        }
        
        [Fact]
        public void UInt16FormatR()
        {
            
            // format R
            CheckUInt16(UInt16.MinValue, "R");
            CheckUInt16(UInt16.MaxValue, "R");
            CheckUInt16(0, "R");
            CheckUInt16(49093, "R");
            CheckUInt16(35350, "R");
            CheckUInt16(52737, "R");
            CheckUInt16(32245, "R");
            CheckUInt16(47981, "R");
            
            // format R0
            CheckUInt16(UInt16.MinValue, "R0");
            CheckUInt16(UInt16.MaxValue, "R0");
            CheckUInt16(0, "R0");
            CheckUInt16(167, "R0");
            CheckUInt16(24634, "R0");
            CheckUInt16(10999, "R0");
            CheckUInt16(63246, "R0");
            CheckUInt16(18628, "R0");
            
            // format R1
            CheckUInt16(UInt16.MinValue, "R1");
            CheckUInt16(UInt16.MaxValue, "R1");
            CheckUInt16(0, "R1");
            CheckUInt16(21133, "R1");
            CheckUInt16(3185, "R1");
            CheckUInt16(22852, "R1");
            CheckUInt16(48008, "R1");
            CheckUInt16(49756, "R1");
            
            // format R2
            CheckUInt16(UInt16.MinValue, "R2");
            CheckUInt16(UInt16.MaxValue, "R2");
            CheckUInt16(0, "R2");
            CheckUInt16(27312, "R2");
            CheckUInt16(39084, "R2");
            CheckUInt16(19152, "R2");
            CheckUInt16(1624, "R2");
            CheckUInt16(481, "R2");
            
            // format R3
            CheckUInt16(UInt16.MinValue, "R3");
            CheckUInt16(UInt16.MaxValue, "R3");
            CheckUInt16(0, "R3");
            CheckUInt16(8877, "R3");
            CheckUInt16(29328, "R3");
            CheckUInt16(30697, "R3");
            CheckUInt16(16449, "R3");
            CheckUInt16(52222, "R3");
            
            // format R4
            CheckUInt16(UInt16.MinValue, "R4");
            CheckUInt16(UInt16.MaxValue, "R4");
            CheckUInt16(0, "R4");
            CheckUInt16(61508, "R4");
            CheckUInt16(65008, "R4");
            CheckUInt16(18151, "R4");
            CheckUInt16(27070, "R4");
            CheckUInt16(53314, "R4");
            
            // format R5
            CheckUInt16(UInt16.MinValue, "R5");
            CheckUInt16(UInt16.MaxValue, "R5");
            CheckUInt16(0, "R5");
            CheckUInt16(40777, "R5");
            CheckUInt16(2688, "R5");
            CheckUInt16(62655, "R5");
            CheckUInt16(15770, "R5");
            CheckUInt16(32561, "R5");
        }
        
        [Fact]
        public void UInt16FormatX()
        {
            
            // format X
            CheckUInt16(UInt16.MinValue, "X");
            CheckUInt16(UInt16.MaxValue, "X");
            CheckUInt16(0, "X");
            CheckUInt16(12922, "X");
            CheckUInt16(29631, "X");
            CheckUInt16(39536, "X");
            CheckUInt16(28265, "X");
            CheckUInt16(39545, "X");
            
            // format X0
            CheckUInt16(UInt16.MinValue, "X0");
            CheckUInt16(UInt16.MaxValue, "X0");
            CheckUInt16(0, "X0");
            CheckUInt16(9207, "X0");
            CheckUInt16(25503, "X0");
            CheckUInt16(60072, "X0");
            CheckUInt16(26328, "X0");
            CheckUInt16(56951, "X0");
            
            // format X1
            CheckUInt16(UInt16.MinValue, "X1");
            CheckUInt16(UInt16.MaxValue, "X1");
            CheckUInt16(0, "X1");
            CheckUInt16(45575, "X1");
            CheckUInt16(16036, "X1");
            CheckUInt16(7459, "X1");
            CheckUInt16(30820, "X1");
            CheckUInt16(3453, "X1");
            
            // format X2
            CheckUInt16(UInt16.MinValue, "X2");
            CheckUInt16(UInt16.MaxValue, "X2");
            CheckUInt16(0, "X2");
            CheckUInt16(55004, "X2");
            CheckUInt16(35908, "X2");
            CheckUInt16(14518, "X2");
            CheckUInt16(47058, "X2");
            CheckUInt16(10265, "X2");
            
            // format X3
            CheckUInt16(UInt16.MinValue, "X3");
            CheckUInt16(UInt16.MaxValue, "X3");
            CheckUInt16(0, "X3");
            CheckUInt16(19765, "X3");
            CheckUInt16(4653, "X3");
            CheckUInt16(36288, "X3");
            CheckUInt16(45557, "X3");
            CheckUInt16(52007, "X3");
            
            // format X4
            CheckUInt16(UInt16.MinValue, "X4");
            CheckUInt16(UInt16.MaxValue, "X4");
            CheckUInt16(0, "X4");
            CheckUInt16(694, "X4");
            CheckUInt16(6482, "X4");
            CheckUInt16(49463, "X4");
            CheckUInt16(9932, "X4");
            CheckUInt16(43385, "X4");
            
            // format X5
            CheckUInt16(UInt16.MinValue, "X5");
            CheckUInt16(UInt16.MaxValue, "X5");
            CheckUInt16(0, "X5");
            CheckUInt16(18445, "X5");
            CheckUInt16(6064, "X5");
            CheckUInt16(7081, "X5");
            CheckUInt16(15446, "X5");
            CheckUInt16(36834, "X5");
        }
        
        [Fact]
        public void UInt16Formatx()
        {
            
            // format x
            CheckUInt16(UInt16.MinValue, "x");
            CheckUInt16(UInt16.MaxValue, "x");
            CheckUInt16(0, "x");
            CheckUInt16(63216, "x");
            CheckUInt16(65083, "x");
            CheckUInt16(56421, "x");
            CheckUInt16(27613, "x");
            CheckUInt16(56809, "x");
            
            // format x0
            CheckUInt16(UInt16.MinValue, "x0");
            CheckUInt16(UInt16.MaxValue, "x0");
            CheckUInt16(0, "x0");
            CheckUInt16(48909, "x0");
            CheckUInt16(34790, "x0");
            CheckUInt16(4369, "x0");
            CheckUInt16(25032, "x0");
            CheckUInt16(6647, "x0");
            
            // format x1
            CheckUInt16(UInt16.MinValue, "x1");
            CheckUInt16(UInt16.MaxValue, "x1");
            CheckUInt16(0, "x1");
            CheckUInt16(45472, "x1");
            CheckUInt16(57549, "x1");
            CheckUInt16(52865, "x1");
            CheckUInt16(23617, "x1");
            CheckUInt16(63845, "x1");
            
            // format x2
            CheckUInt16(UInt16.MinValue, "x2");
            CheckUInt16(UInt16.MaxValue, "x2");
            CheckUInt16(0, "x2");
            CheckUInt16(4869, "x2");
            CheckUInt16(53704, "x2");
            CheckUInt16(15597, "x2");
            CheckUInt16(5505, "x2");
            CheckUInt16(12796, "x2");
            
            // format x3
            CheckUInt16(UInt16.MinValue, "x3");
            CheckUInt16(UInt16.MaxValue, "x3");
            CheckUInt16(0, "x3");
            CheckUInt16(8268, "x3");
            CheckUInt16(58877, "x3");
            CheckUInt16(59513, "x3");
            CheckUInt16(41793, "x3");
            CheckUInt16(38851, "x3");
            
            // format x4
            CheckUInt16(UInt16.MinValue, "x4");
            CheckUInt16(UInt16.MaxValue, "x4");
            CheckUInt16(0, "x4");
            CheckUInt16(2724, "x4");
            CheckUInt16(41574, "x4");
            CheckUInt16(50140, "x4");
            CheckUInt16(48477, "x4");
            CheckUInt16(38506, "x4");
            
            // format x5
            CheckUInt16(UInt16.MinValue, "x5");
            CheckUInt16(UInt16.MaxValue, "x5");
            CheckUInt16(0, "x5");
            CheckUInt16(39511, "x5");
            CheckUInt16(8955, "x5");
            CheckUInt16(57547, "x5");
            CheckUInt16(59521, "x5");
            CheckUInt16(5771, "x5");
        }
        
        public void CheckInt16(Int16 value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int16FormatD()
        {
            
            // format D
            CheckInt16(Int16.MinValue, "D");
            CheckInt16(Int16.MaxValue, "D");
            CheckInt16(0, "D");
            CheckInt16(22687, "D");
            CheckInt16(12253, "D");
            CheckInt16(19671, "D");
            CheckInt16(23015, "D");
            CheckInt16(-5877, "D");
            
            // format D0
            CheckInt16(Int16.MinValue, "D0");
            CheckInt16(Int16.MaxValue, "D0");
            CheckInt16(0, "D0");
            CheckInt16(17741, "D0");
            CheckInt16(-32484, "D0");
            CheckInt16(-21512, "D0");
            CheckInt16(6141, "D0");
            CheckInt16(-26234, "D0");
            
            // format D1
            CheckInt16(Int16.MinValue, "D1");
            CheckInt16(Int16.MaxValue, "D1");
            CheckInt16(0, "D1");
            CheckInt16(-24089, "D1");
            CheckInt16(-13617, "D1");
            CheckInt16(-6922, "D1");
            CheckInt16(-21146, "D1");
            CheckInt16(5748, "D1");
            
            // format D2
            CheckInt16(Int16.MinValue, "D2");
            CheckInt16(Int16.MaxValue, "D2");
            CheckInt16(0, "D2");
            CheckInt16(-2493, "D2");
            CheckInt16(23233, "D2");
            CheckInt16(-31193, "D2");
            CheckInt16(-30118, "D2");
            CheckInt16(-4203, "D2");
            
            // format D3
            CheckInt16(Int16.MinValue, "D3");
            CheckInt16(Int16.MaxValue, "D3");
            CheckInt16(0, "D3");
            CheckInt16(-28429, "D3");
            CheckInt16(-27199, "D3");
            CheckInt16(-18141, "D3");
            CheckInt16(21528, "D3");
            CheckInt16(21317, "D3");
            
            // format D4
            CheckInt16(Int16.MinValue, "D4");
            CheckInt16(Int16.MaxValue, "D4");
            CheckInt16(0, "D4");
            CheckInt16(-25434, "D4");
            CheckInt16(17417, "D4");
            CheckInt16(-11342, "D4");
            CheckInt16(19293, "D4");
            CheckInt16(-97, "D4");
            
            // format D5
            CheckInt16(Int16.MinValue, "D5");
            CheckInt16(Int16.MaxValue, "D5");
            CheckInt16(0, "D5");
            CheckInt16(3749, "D5");
            CheckInt16(-32766, "D5");
            CheckInt16(26111, "D5");
            CheckInt16(-14923, "D5");
            CheckInt16(-24379, "D5");
        }
        
        [Fact]
        public void Int16Formatd()
        {
            
            // format d
            CheckInt16(Int16.MinValue, "d");
            CheckInt16(Int16.MaxValue, "d");
            CheckInt16(0, "d");
            CheckInt16(-7386, "d");
            CheckInt16(-31504, "d");
            CheckInt16(-7419, "d");
            CheckInt16(11381, "d");
            CheckInt16(-4946, "d");
            
            // format d0
            CheckInt16(Int16.MinValue, "d0");
            CheckInt16(Int16.MaxValue, "d0");
            CheckInt16(0, "d0");
            CheckInt16(-24784, "d0");
            CheckInt16(14852, "d0");
            CheckInt16(-12165, "d0");
            CheckInt16(2491, "d0");
            CheckInt16(-2596, "d0");
            
            // format d1
            CheckInt16(Int16.MinValue, "d1");
            CheckInt16(Int16.MaxValue, "d1");
            CheckInt16(0, "d1");
            CheckInt16(16339, "d1");
            CheckInt16(-17040, "d1");
            CheckInt16(5750, "d1");
            CheckInt16(-22808, "d1");
            CheckInt16(-24538, "d1");
            
            // format d2
            CheckInt16(Int16.MinValue, "d2");
            CheckInt16(Int16.MaxValue, "d2");
            CheckInt16(0, "d2");
            CheckInt16(16276, "d2");
            CheckInt16(-25389, "d2");
            CheckInt16(22128, "d2");
            CheckInt16(-1813, "d2");
            CheckInt16(-31336, "d2");
            
            // format d3
            CheckInt16(Int16.MinValue, "d3");
            CheckInt16(Int16.MaxValue, "d3");
            CheckInt16(0, "d3");
            CheckInt16(17118, "d3");
            CheckInt16(-2374, "d3");
            CheckInt16(30910, "d3");
            CheckInt16(-31070, "d3");
            CheckInt16(-13212, "d3");
            
            // format d4
            CheckInt16(Int16.MinValue, "d4");
            CheckInt16(Int16.MaxValue, "d4");
            CheckInt16(0, "d4");
            CheckInt16(-32445, "d4");
            CheckInt16(11624, "d4");
            CheckInt16(-8038, "d4");
            CheckInt16(-26530, "d4");
            CheckInt16(2784, "d4");
            
            // format d5
            CheckInt16(Int16.MinValue, "d5");
            CheckInt16(Int16.MaxValue, "d5");
            CheckInt16(0, "d5");
            CheckInt16(-24092, "d5");
            CheckInt16(-6961, "d5");
            CheckInt16(-24768, "d5");
            CheckInt16(-29536, "d5");
            CheckInt16(-19635, "d5");
        }
        
        [Fact]
        public void Int16FormatG()
        {
            
            // format G
            CheckInt16(Int16.MinValue, "G");
            CheckInt16(Int16.MaxValue, "G");
            CheckInt16(0, "G");
            CheckInt16(-3758, "G");
            CheckInt16(-2116, "G");
            CheckInt16(-9808, "G");
            CheckInt16(7594, "G");
            CheckInt16(-12188, "G");
        }
        
        [Fact]
        public void Int16FormatN()
        {
            
            // format N
            CheckInt16(Int16.MinValue, "N");
            CheckInt16(Int16.MaxValue, "N");
            CheckInt16(0, "N");
            CheckInt16(-10515, "N");
            CheckInt16(17732, "N");
            CheckInt16(12135, "N");
            CheckInt16(-8644, "N");
            CheckInt16(-27791, "N");
            
            // format N0
            CheckInt16(Int16.MinValue, "N0");
            CheckInt16(Int16.MaxValue, "N0");
            CheckInt16(0, "N0");
            CheckInt16(24373, "N0");
            CheckInt16(-21102, "N0");
            CheckInt16(-21303, "N0");
            CheckInt16(11062, "N0");
            CheckInt16(16394, "N0");
            
            // format N1
            CheckInt16(Int16.MinValue, "N1");
            CheckInt16(Int16.MaxValue, "N1");
            CheckInt16(0, "N1");
            CheckInt16(-3631, "N1");
            CheckInt16(-22128, "N1");
            CheckInt16(-4845, "N1");
            CheckInt16(-16355, "N1");
            CheckInt16(-8731, "N1");
            
            // format N2
            CheckInt16(Int16.MinValue, "N2");
            CheckInt16(Int16.MaxValue, "N2");
            CheckInt16(0, "N2");
            CheckInt16(27755, "N2");
            CheckInt16(-29647, "N2");
            CheckInt16(-9118, "N2");
            CheckInt16(-8175, "N2");
            CheckInt16(-5270, "N2");
            
            // format N3
            CheckInt16(Int16.MinValue, "N3");
            CheckInt16(Int16.MaxValue, "N3");
            CheckInt16(0, "N3");
            CheckInt16(-3642, "N3");
            CheckInt16(-9878, "N3");
            CheckInt16(-18403, "N3");
            CheckInt16(32473, "N3");
            CheckInt16(-11273, "N3");
            
            // format N4
            CheckInt16(Int16.MinValue, "N4");
            CheckInt16(Int16.MaxValue, "N4");
            CheckInt16(0, "N4");
            CheckInt16(-9468, "N4");
            CheckInt16(-25041, "N4");
            CheckInt16(2517, "N4");
            CheckInt16(29594, "N4");
            CheckInt16(11986, "N4");
            
            // format N5
            CheckInt16(Int16.MinValue, "N5");
            CheckInt16(Int16.MaxValue, "N5");
            CheckInt16(0, "N5");
            CheckInt16(-14376, "N5");
            CheckInt16(17185, "N5");
            CheckInt16(-18235, "N5");
            CheckInt16(-22393, "N5");
            CheckInt16(11945, "N5");
        }
        
        [Fact]
        public void Int16FormatR()
        {
            
            // format R
            CheckInt16(Int16.MinValue, "R");
            CheckInt16(Int16.MaxValue, "R");
            CheckInt16(0, "R");
            CheckInt16(32153, "R");
            CheckInt16(18258, "R");
            CheckInt16(6785, "R");
            CheckInt16(29487, "R");
            CheckInt16(-4818, "R");
            
            // format R0
            CheckInt16(Int16.MinValue, "R0");
            CheckInt16(Int16.MaxValue, "R0");
            CheckInt16(0, "R0");
            CheckInt16(21424, "R0");
            CheckInt16(158, "R0");
            CheckInt16(13666, "R0");
            CheckInt16(-10157, "R0");
            CheckInt16(-26353, "R0");
            
            // format R1
            CheckInt16(Int16.MinValue, "R1");
            CheckInt16(Int16.MaxValue, "R1");
            CheckInt16(0, "R1");
            CheckInt16(30803, "R1");
            CheckInt16(30650, "R1");
            CheckInt16(24354, "R1");
            CheckInt16(11962, "R1");
            CheckInt16(-14623, "R1");
            
            // format R2
            CheckInt16(Int16.MinValue, "R2");
            CheckInt16(Int16.MaxValue, "R2");
            CheckInt16(0, "R2");
            CheckInt16(-6879, "R2");
            CheckInt16(-25767, "R2");
            CheckInt16(31134, "R2");
            CheckInt16(-19904, "R2");
            CheckInt16(24220, "R2");
            
            // format R3
            CheckInt16(Int16.MinValue, "R3");
            CheckInt16(Int16.MaxValue, "R3");
            CheckInt16(0, "R3");
            CheckInt16(32129, "R3");
            CheckInt16(3366, "R3");
            CheckInt16(12429, "R3");
            CheckInt16(-30139, "R3");
            CheckInt16(14444, "R3");
            
            // format R4
            CheckInt16(Int16.MinValue, "R4");
            CheckInt16(Int16.MaxValue, "R4");
            CheckInt16(0, "R4");
            CheckInt16(16646, "R4");
            CheckInt16(9148, "R4");
            CheckInt16(-18130, "R4");
            CheckInt16(31843, "R4");
            CheckInt16(-1999, "R4");
            
            // format R5
            CheckInt16(Int16.MinValue, "R5");
            CheckInt16(Int16.MaxValue, "R5");
            CheckInt16(0, "R5");
            CheckInt16(11950, "R5");
            CheckInt16(28873, "R5");
            CheckInt16(-15220, "R5");
            CheckInt16(4467, "R5");
            CheckInt16(-8117, "R5");
        }
        
        [Fact]
        public void Int16FormatX()
        {
            
            // format X
            CheckInt16(Int16.MinValue, "X");
            CheckInt16(Int16.MaxValue, "X");
            CheckInt16(0, "X");
            CheckInt16(-23272, "X");
            CheckInt16(-3665, "X");
            CheckInt16(-5838, "X");
            CheckInt16(29409, "X");
            CheckInt16(6073, "X");
            
            // format X0
            CheckInt16(Int16.MinValue, "X0");
            CheckInt16(Int16.MaxValue, "X0");
            CheckInt16(0, "X0");
            CheckInt16(28967, "X0");
            CheckInt16(9222, "X0");
            CheckInt16(24521, "X0");
            CheckInt16(26057, "X0");
            CheckInt16(-9310, "X0");
            
            // format X1
            CheckInt16(Int16.MinValue, "X1");
            CheckInt16(Int16.MaxValue, "X1");
            CheckInt16(0, "X1");
            CheckInt16(-7351, "X1");
            CheckInt16(-16629, "X1");
            CheckInt16(23321, "X1");
            CheckInt16(11448, "X1");
            CheckInt16(-13903, "X1");
            
            // format X2
            CheckInt16(Int16.MinValue, "X2");
            CheckInt16(Int16.MaxValue, "X2");
            CheckInt16(0, "X2");
            CheckInt16(-21377, "X2");
            CheckInt16(18818, "X2");
            CheckInt16(-31099, "X2");
            CheckInt16(-13847, "X2");
            CheckInt16(12582, "X2");
            
            // format X3
            CheckInt16(Int16.MinValue, "X3");
            CheckInt16(Int16.MaxValue, "X3");
            CheckInt16(0, "X3");
            CheckInt16(-3982, "X3");
            CheckInt16(-26939, "X3");
            CheckInt16(4156, "X3");
            CheckInt16(-17725, "X3");
            CheckInt16(11303, "X3");
            
            // format X4
            CheckInt16(Int16.MinValue, "X4");
            CheckInt16(Int16.MaxValue, "X4");
            CheckInt16(0, "X4");
            CheckInt16(-20493, "X4");
            CheckInt16(-14480, "X4");
            CheckInt16(14590, "X4");
            CheckInt16(24608, "X4");
            CheckInt16(-5537, "X4");
            
            // format X5
            CheckInt16(Int16.MinValue, "X5");
            CheckInt16(Int16.MaxValue, "X5");
            CheckInt16(0, "X5");
            CheckInt16(-30839, "X5");
            CheckInt16(13101, "X5");
            CheckInt16(-12881, "X5");
            CheckInt16(-12689, "X5");
            CheckInt16(-24120, "X5");
        }
        
        [Fact]
        public void Int16Formatx()
        {
            
            // format x
            CheckInt16(Int16.MinValue, "x");
            CheckInt16(Int16.MaxValue, "x");
            CheckInt16(0, "x");
            CheckInt16(29552, "x");
            CheckInt16(12838, "x");
            CheckInt16(-31044, "x");
            CheckInt16(6789, "x");
            CheckInt16(28020, "x");
            
            // format x0
            CheckInt16(Int16.MinValue, "x0");
            CheckInt16(Int16.MaxValue, "x0");
            CheckInt16(0, "x0");
            CheckInt16(-9861, "x0");
            CheckInt16(11612, "x0");
            CheckInt16(19138, "x0");
            CheckInt16(11937, "x0");
            CheckInt16(-10973, "x0");
            
            // format x1
            CheckInt16(Int16.MinValue, "x1");
            CheckInt16(Int16.MaxValue, "x1");
            CheckInt16(0, "x1");
            CheckInt16(506, "x1");
            CheckInt16(18593, "x1");
            CheckInt16(3188, "x1");
            CheckInt16(12977, "x1");
            CheckInt16(-13390, "x1");
            
            // format x2
            CheckInt16(Int16.MinValue, "x2");
            CheckInt16(Int16.MaxValue, "x2");
            CheckInt16(0, "x2");
            CheckInt16(25899, "x2");
            CheckInt16(27204, "x2");
            CheckInt16(31394, "x2");
            CheckInt16(24651, "x2");
            CheckInt16(28631, "x2");
            
            // format x3
            CheckInt16(Int16.MinValue, "x3");
            CheckInt16(Int16.MaxValue, "x3");
            CheckInt16(0, "x3");
            CheckInt16(-29101, "x3");
            CheckInt16(24946, "x3");
            CheckInt16(-20882, "x3");
            CheckInt16(-14662, "x3");
            CheckInt16(-6203, "x3");
            
            // format x4
            CheckInt16(Int16.MinValue, "x4");
            CheckInt16(Int16.MaxValue, "x4");
            CheckInt16(0, "x4");
            CheckInt16(10679, "x4");
            CheckInt16(27399, "x4");
            CheckInt16(32680, "x4");
            CheckInt16(-1174, "x4");
            CheckInt16(-11239, "x4");
            
            // format x5
            CheckInt16(Int16.MinValue, "x5");
            CheckInt16(Int16.MaxValue, "x5");
            CheckInt16(0, "x5");
            CheckInt16(12314, "x5");
            CheckInt16(29019, "x5");
            CheckInt16(3242, "x5");
            CheckInt16(2799, "x5");
            CheckInt16(-10689, "x5");
        }
        
        public void CheckUInt32(UInt32 value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt32FormatD()
        {
            
            // format D
            CheckUInt32(UInt32.MinValue, "D");
            CheckUInt32(UInt32.MaxValue, "D");
            CheckUInt32(0, "D");
            CheckUInt32(1026300808, "D");
            CheckUInt32(1633877968, "D");
            CheckUInt32(905949945, "D");
            CheckUInt32(775561645, "D");
            CheckUInt32(735443678, "D");
            
            // format D0
            CheckUInt32(UInt32.MinValue, "D0");
            CheckUInt32(UInt32.MaxValue, "D0");
            CheckUInt32(0, "D0");
            CheckUInt32(1636494232, "D0");
            CheckUInt32(637606963, "D0");
            CheckUInt32(1892505391, "D0");
            CheckUInt32(1926238729, "D0");
            CheckUInt32(353809847, "D0");
            
            // format D1
            CheckUInt32(UInt32.MinValue, "D1");
            CheckUInt32(UInt32.MaxValue, "D1");
            CheckUInt32(0, "D1");
            CheckUInt32(866719890, "D1");
            CheckUInt32(1568510681, "D1");
            CheckUInt32(52852191, "D1");
            CheckUInt32(1245126006, "D1");
            CheckUInt32(1117370648, "D1");
            
            // format D2
            CheckUInt32(UInt32.MinValue, "D2");
            CheckUInt32(UInt32.MaxValue, "D2");
            CheckUInt32(0, "D2");
            CheckUInt32(245516760, "D2");
            CheckUInt32(1548044343, "D2");
            CheckUInt32(917612633, "D2");
            CheckUInt32(793473831, "D2");
            CheckUInt32(163224233, "D2");
            
            // format D3
            CheckUInt32(UInt32.MinValue, "D3");
            CheckUInt32(UInt32.MaxValue, "D3");
            CheckUInt32(0, "D3");
            CheckUInt32(150944073, "D3");
            CheckUInt32(1104939015, "D3");
            CheckUInt32(1610691357, "D3");
            CheckUInt32(425727183, "D3");
            CheckUInt32(568249857, "D3");
            
            // format D4
            CheckUInt32(UInt32.MinValue, "D4");
            CheckUInt32(UInt32.MaxValue, "D4");
            CheckUInt32(0, "D4");
            CheckUInt32(926516597, "D4");
            CheckUInt32(1457114277, "D4");
            CheckUInt32(665589148, "D4");
            CheckUInt32(759438835, "D4");
            CheckUInt32(1384377040, "D4");
            
            // format D5
            CheckUInt32(UInt32.MinValue, "D5");
            CheckUInt32(UInt32.MaxValue, "D5");
            CheckUInt32(0, "D5");
            CheckUInt32(1213140557, "D5");
            CheckUInt32(503015848, "D5");
            CheckUInt32(12739448, "D5");
            CheckUInt32(775492765, "D5");
            CheckUInt32(1756192812, "D5");
        }
        
        [Fact]
        public void UInt32Formatd()
        {
            
            // format d
            CheckUInt32(UInt32.MinValue, "d");
            CheckUInt32(UInt32.MaxValue, "d");
            CheckUInt32(0, "d");
            CheckUInt32(288571693, "d");
            CheckUInt32(1059246176, "d");
            CheckUInt32(1326946088, "d");
            CheckUInt32(1146103082, "d");
            CheckUInt32(375488251, "d");
            
            // format d0
            CheckUInt32(UInt32.MinValue, "d0");
            CheckUInt32(UInt32.MaxValue, "d0");
            CheckUInt32(0, "d0");
            CheckUInt32(1630060142, "d0");
            CheckUInt32(2146189318, "d0");
            CheckUInt32(610755760, "d0");
            CheckUInt32(239505205, "d0");
            CheckUInt32(3797821, "d0");
            
            // format d1
            CheckUInt32(UInt32.MinValue, "d1");
            CheckUInt32(UInt32.MaxValue, "d1");
            CheckUInt32(0, "d1");
            CheckUInt32(2002670017, "d1");
            CheckUInt32(1918743830, "d1");
            CheckUInt32(899516878, "d1");
            CheckUInt32(2065412812, "d1");
            CheckUInt32(459970216, "d1");
            
            // format d2
            CheckUInt32(UInt32.MinValue, "d2");
            CheckUInt32(UInt32.MaxValue, "d2");
            CheckUInt32(0, "d2");
            CheckUInt32(2076738987, "d2");
            CheckUInt32(1107075157, "d2");
            CheckUInt32(386537856, "d2");
            CheckUInt32(1002285121, "d2");
            CheckUInt32(572578305, "d2");
            
            // format d3
            CheckUInt32(UInt32.MinValue, "d3");
            CheckUInt32(UInt32.MaxValue, "d3");
            CheckUInt32(0, "d3");
            CheckUInt32(2068845440, "d3");
            CheckUInt32(23186611, "d3");
            CheckUInt32(480222762, "d3");
            CheckUInt32(207311788, "d3");
            CheckUInt32(1956410728, "d3");
            
            // format d4
            CheckUInt32(UInt32.MinValue, "d4");
            CheckUInt32(UInt32.MaxValue, "d4");
            CheckUInt32(0, "d4");
            CheckUInt32(179379955, "d4");
            CheckUInt32(2119501462, "d4");
            CheckUInt32(1133066556, "d4");
            CheckUInt32(541861689, "d4");
            CheckUInt32(1288152937, "d4");
            
            // format d5
            CheckUInt32(UInt32.MinValue, "d5");
            CheckUInt32(UInt32.MaxValue, "d5");
            CheckUInt32(0, "d5");
            CheckUInt32(363704042, "d5");
            CheckUInt32(1555771233, "d5");
            CheckUInt32(1424843073, "d5");
            CheckUInt32(1636416841, "d5");
            CheckUInt32(828798955, "d5");
        }
        
        [Fact]
        public void UInt32FormatG()
        {
            
            // format G
            CheckUInt32(UInt32.MinValue, "G");
            CheckUInt32(UInt32.MaxValue, "G");
            CheckUInt32(0, "G");
            CheckUInt32(1333754231, "G");
            CheckUInt32(221098255, "G");
            CheckUInt32(1918993198, "G");
            CheckUInt32(417985580, "G");
            CheckUInt32(680647738, "G");
        }
        
        [Fact]
        public void UInt32FormatN()
        {
            
            // format N
            CheckUInt32(UInt32.MinValue, "N");
            CheckUInt32(UInt32.MaxValue, "N");
            CheckUInt32(0, "N");
            CheckUInt32(152238402, "N");
            CheckUInt32(494183255, "N");
            CheckUInt32(1371186152, "N");
            CheckUInt32(421929362, "N");
            CheckUInt32(713063487, "N");
            
            // format N0
            CheckUInt32(UInt32.MinValue, "N0");
            CheckUInt32(UInt32.MaxValue, "N0");
            CheckUInt32(0, "N0");
            CheckUInt32(1155256414, "N0");
            CheckUInt32(557597399, "N0");
            CheckUInt32(747659983, "N0");
            CheckUInt32(299468619, "N0");
            CheckUInt32(1455121700, "N0");
            
            // format N1
            CheckUInt32(UInt32.MinValue, "N1");
            CheckUInt32(UInt32.MaxValue, "N1");
            CheckUInt32(0, "N1");
            CheckUInt32(106065400, "N1");
            CheckUInt32(116477992, "N1");
            CheckUInt32(1157937974, "N1");
            CheckUInt32(202914460, "N1");
            CheckUInt32(1834831019, "N1");
            
            // format N2
            CheckUInt32(UInt32.MinValue, "N2");
            CheckUInt32(UInt32.MaxValue, "N2");
            CheckUInt32(0, "N2");
            CheckUInt32(265385082, "N2");
            CheckUInt32(579023414, "N2");
            CheckUInt32(1119634300, "N2");
            CheckUInt32(1337176001, "N2");
            CheckUInt32(196108296, "N2");
            
            // format N3
            CheckUInt32(UInt32.MinValue, "N3");
            CheckUInt32(UInt32.MaxValue, "N3");
            CheckUInt32(0, "N3");
            CheckUInt32(1658042327, "N3");
            CheckUInt32(1013122762, "N3");
            CheckUInt32(68894071, "N3");
            CheckUInt32(1098835915, "N3");
            CheckUInt32(1787577426, "N3");
            
            // format N4
            CheckUInt32(UInt32.MinValue, "N4");
            CheckUInt32(UInt32.MaxValue, "N4");
            CheckUInt32(0, "N4");
            CheckUInt32(446898784, "N4");
            CheckUInt32(493900757, "N4");
            CheckUInt32(1410583684, "N4");
            CheckUInt32(1236613857, "N4");
            CheckUInt32(1273699632, "N4");
            
            // format N5
            CheckUInt32(UInt32.MinValue, "N5");
            CheckUInt32(UInt32.MaxValue, "N5");
            CheckUInt32(0, "N5");
            CheckUInt32(1855640732, "N5");
            CheckUInt32(1335565606, "N5");
            CheckUInt32(2116035923, "N5");
            CheckUInt32(321637383, "N5");
            CheckUInt32(420339903, "N5");
        }
        
        [Fact]
        public void UInt32FormatR()
        {
            
            // format R
            CheckUInt32(UInt32.MinValue, "R");
            CheckUInt32(UInt32.MaxValue, "R");
            CheckUInt32(0, "R");
            CheckUInt32(1574662185, "R");
            CheckUInt32(799484106, "R");
            CheckUInt32(58293400, "R");
            CheckUInt32(1641731948, "R");
            CheckUInt32(801154314, "R");
            
            // format R0
            CheckUInt32(UInt32.MinValue, "R0");
            CheckUInt32(UInt32.MaxValue, "R0");
            CheckUInt32(0, "R0");
            CheckUInt32(1769266203, "R0");
            CheckUInt32(1371841479, "R0");
            CheckUInt32(833597937, "R0");
            CheckUInt32(1234223636, "R0");
            CheckUInt32(1182087537, "R0");
            
            // format R1
            CheckUInt32(UInt32.MinValue, "R1");
            CheckUInt32(UInt32.MaxValue, "R1");
            CheckUInt32(0, "R1");
            CheckUInt32(247226050, "R1");
            CheckUInt32(397833259, "R1");
            CheckUInt32(1221928613, "R1");
            CheckUInt32(1949069469, "R1");
            CheckUInt32(563413873, "R1");
            
            // format R2
            CheckUInt32(UInt32.MinValue, "R2");
            CheckUInt32(UInt32.MaxValue, "R2");
            CheckUInt32(0, "R2");
            CheckUInt32(754730817, "R2");
            CheckUInt32(1248947602, "R2");
            CheckUInt32(581817197, "R2");
            CheckUInt32(221877284, "R2");
            CheckUInt32(1170089058, "R2");
            
            // format R3
            CheckUInt32(UInt32.MinValue, "R3");
            CheckUInt32(UInt32.MaxValue, "R3");
            CheckUInt32(0, "R3");
            CheckUInt32(1286599287, "R3");
            CheckUInt32(425289184, "R3");
            CheckUInt32(272350237, "R3");
            CheckUInt32(781835583, "R3");
            CheckUInt32(266164703, "R3");
            
            // format R4
            CheckUInt32(UInt32.MinValue, "R4");
            CheckUInt32(UInt32.MaxValue, "R4");
            CheckUInt32(0, "R4");
            CheckUInt32(661355657, "R4");
            CheckUInt32(1294497362, "R4");
            CheckUInt32(1658529773, "R4");
            CheckUInt32(1173252634, "R4");
            CheckUInt32(1746964615, "R4");
            
            // format R5
            CheckUInt32(UInt32.MinValue, "R5");
            CheckUInt32(UInt32.MaxValue, "R5");
            CheckUInt32(0, "R5");
            CheckUInt32(917983441, "R5");
            CheckUInt32(147925716, "R5");
            CheckUInt32(836300591, "R5");
            CheckUInt32(1930058204, "R5");
            CheckUInt32(260168834, "R5");
        }
        
        [Fact]
        public void UInt32FormatX()
        {
            
            // format X
            CheckUInt32(UInt32.MinValue, "X");
            CheckUInt32(UInt32.MaxValue, "X");
            CheckUInt32(0, "X");
            CheckUInt32(1613384623, "X");
            CheckUInt32(520730014, "X");
            CheckUInt32(1625385999, "X");
            CheckUInt32(536021687, "X");
            CheckUInt32(574325740, "X");
            
            // format X0
            CheckUInt32(UInt32.MinValue, "X0");
            CheckUInt32(UInt32.MaxValue, "X0");
            CheckUInt32(0, "X0");
            CheckUInt32(286200848, "X0");
            CheckUInt32(179524825, "X0");
            CheckUInt32(982154082, "X0");
            CheckUInt32(2064232025, "X0");
            CheckUInt32(1540351376, "X0");
            
            // format X1
            CheckUInt32(UInt32.MinValue, "X1");
            CheckUInt32(UInt32.MaxValue, "X1");
            CheckUInt32(0, "X1");
            CheckUInt32(49065525, "X1");
            CheckUInt32(1419455791, "X1");
            CheckUInt32(1608997862, "X1");
            CheckUInt32(673199984, "X1");
            CheckUInt32(518968815, "X1");
            
            // format X2
            CheckUInt32(UInt32.MinValue, "X2");
            CheckUInt32(UInt32.MaxValue, "X2");
            CheckUInt32(0, "X2");
            CheckUInt32(606693130, "X2");
            CheckUInt32(753748409, "X2");
            CheckUInt32(1894158639, "X2");
            CheckUInt32(1299031972, "X2");
            CheckUInt32(1281224263, "X2");
            
            // format X3
            CheckUInt32(UInt32.MinValue, "X3");
            CheckUInt32(UInt32.MaxValue, "X3");
            CheckUInt32(0, "X3");
            CheckUInt32(1149373001, "X3");
            CheckUInt32(527133869, "X3");
            CheckUInt32(1423941464, "X3");
            CheckUInt32(1375567245, "X3");
            CheckUInt32(139798657, "X3");
            
            // format X4
            CheckUInt32(UInt32.MinValue, "X4");
            CheckUInt32(UInt32.MaxValue, "X4");
            CheckUInt32(0, "X4");
            CheckUInt32(474768841, "X4");
            CheckUInt32(1860795353, "X4");
            CheckUInt32(1807828950, "X4");
            CheckUInt32(1634742668, "X4");
            CheckUInt32(264104095, "X4");
            
            // format X5
            CheckUInt32(UInt32.MinValue, "X5");
            CheckUInt32(UInt32.MaxValue, "X5");
            CheckUInt32(0, "X5");
            CheckUInt32(99300334, "X5");
            CheckUInt32(1709016315, "X5");
            CheckUInt32(1439354056, "X5");
            CheckUInt32(1688900635, "X5");
            CheckUInt32(1097512897, "X5");
        }
        
        [Fact]
        public void UInt32Formatx()
        {
            
            // format x
            CheckUInt32(UInt32.MinValue, "x");
            CheckUInt32(UInt32.MaxValue, "x");
            CheckUInt32(0, "x");
            CheckUInt32(234000803, "x");
            CheckUInt32(1771045250, "x");
            CheckUInt32(45795510, "x");
            CheckUInt32(1795035191, "x");
            CheckUInt32(883888210, "x");
            
            // format x0
            CheckUInt32(UInt32.MinValue, "x0");
            CheckUInt32(UInt32.MaxValue, "x0");
            CheckUInt32(0, "x0");
            CheckUInt32(1107074462, "x0");
            CheckUInt32(1590618749, "x0");
            CheckUInt32(355601859, "x0");
            CheckUInt32(1388967854, "x0");
            CheckUInt32(217099178, "x0");
            
            // format x1
            CheckUInt32(UInt32.MinValue, "x1");
            CheckUInt32(UInt32.MaxValue, "x1");
            CheckUInt32(0, "x1");
            CheckUInt32(1389383513, "x1");
            CheckUInt32(1832983147, "x1");
            CheckUInt32(985329789, "x1");
            CheckUInt32(654283819, "x1");
            CheckUInt32(1140271485, "x1");
            
            // format x2
            CheckUInt32(UInt32.MinValue, "x2");
            CheckUInt32(UInt32.MaxValue, "x2");
            CheckUInt32(0, "x2");
            CheckUInt32(164235032, "x2");
            CheckUInt32(401250724, "x2");
            CheckUInt32(1684752266, "x2");
            CheckUInt32(648833941, "x2");
            CheckUInt32(1258279480, "x2");
            
            // format x3
            CheckUInt32(UInt32.MinValue, "x3");
            CheckUInt32(UInt32.MaxValue, "x3");
            CheckUInt32(0, "x3");
            CheckUInt32(1086250754, "x3");
            CheckUInt32(1244272197, "x3");
            CheckUInt32(249818754, "x3");
            CheckUInt32(396223030, "x3");
            CheckUInt32(99556899, "x3");
            
            // format x4
            CheckUInt32(UInt32.MinValue, "x4");
            CheckUInt32(UInt32.MaxValue, "x4");
            CheckUInt32(0, "x4");
            CheckUInt32(572889142, "x4");
            CheckUInt32(519179522, "x4");
            CheckUInt32(1494895061, "x4");
            CheckUInt32(1800127929, "x4");
            CheckUInt32(1441051042, "x4");
            
            // format x5
            CheckUInt32(UInt32.MinValue, "x5");
            CheckUInt32(UInt32.MaxValue, "x5");
            CheckUInt32(0, "x5");
            CheckUInt32(487532857, "x5");
            CheckUInt32(2127585382, "x5");
            CheckUInt32(2067580874, "x5");
            CheckUInt32(1723170734, "x5");
            CheckUInt32(284968012, "x5");
        }
        
        public void CheckInt32(Int32 value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int32FormatD()
        {
            
            // format D
            CheckInt32(Int32.MinValue, "D");
            CheckInt32(Int32.MaxValue, "D");
            CheckInt32(0, "D");
            CheckInt32(983131526, "D");
            CheckInt32(-99123450, "D");
            CheckInt32(174149800, "D");
            CheckInt32(-171532012, "D");
            CheckInt32(1158468066, "D");
            
            // format D0
            CheckInt32(Int32.MinValue, "D0");
            CheckInt32(Int32.MaxValue, "D0");
            CheckInt32(0, "D0");
            CheckInt32(-789269343, "D0");
            CheckInt32(1153545130, "D0");
            CheckInt32(99869063, "D0");
            CheckInt32(24264048, "D0");
            CheckInt32(430621154, "D0");
            
            // format D1
            CheckInt32(Int32.MinValue, "D1");
            CheckInt32(Int32.MaxValue, "D1");
            CheckInt32(0, "D1");
            CheckInt32(-1137212255, "D1");
            CheckInt32(-1797056129, "D1");
            CheckInt32(-310999070, "D1");
            CheckInt32(95723687, "D1");
            CheckInt32(-2095400461, "D1");
            
            // format D2
            CheckInt32(Int32.MinValue, "D2");
            CheckInt32(Int32.MaxValue, "D2");
            CheckInt32(0, "D2");
            CheckInt32(-1409281780, "D2");
            CheckInt32(1409642701, "D2");
            CheckInt32(-157139960, "D2");
            CheckInt32(-302127278, "D2");
            CheckInt32(-474684142, "D2");
            
            // format D3
            CheckInt32(Int32.MinValue, "D3");
            CheckInt32(Int32.MaxValue, "D3");
            CheckInt32(0, "D3");
            CheckInt32(914718743, "D3");
            CheckInt32(-1238834336, "D3");
            CheckInt32(1457771204, "D3");
            CheckInt32(-1513118040, "D3");
            CheckInt32(-1700258867, "D3");
            
            // format D4
            CheckInt32(Int32.MinValue, "D4");
            CheckInt32(Int32.MaxValue, "D4");
            CheckInt32(0, "D4");
            CheckInt32(463268807, "D4");
            CheckInt32(1636959718, "D4");
            CheckInt32(-1295239408, "D4");
            CheckInt32(1058380418, "D4");
            CheckInt32(-104144696, "D4");
            
            // format D5
            CheckInt32(Int32.MinValue, "D5");
            CheckInt32(Int32.MaxValue, "D5");
            CheckInt32(0, "D5");
            CheckInt32(-1610514213, "D5");
            CheckInt32(-87056800, "D5");
            CheckInt32(-1636100662, "D5");
            CheckInt32(-1613306511, "D5");
            CheckInt32(337331224, "D5");
        }
        
        [Fact]
        public void Int32Formatd()
        {
            
            // format d
            CheckInt32(Int32.MinValue, "d");
            CheckInt32(Int32.MaxValue, "d");
            CheckInt32(0, "d");
            CheckInt32(-1543405983, "d");
            CheckInt32(-315835977, "d");
            CheckInt32(1244027045, "d");
            CheckInt32(282392161, "d");
            CheckInt32(-237707089, "d");
            
            // format d0
            CheckInt32(Int32.MinValue, "d0");
            CheckInt32(Int32.MaxValue, "d0");
            CheckInt32(0, "d0");
            CheckInt32(1222260548, "d0");
            CheckInt32(1150182358, "d0");
            CheckInt32(1413781159, "d0");
            CheckInt32(-275926203, "d0");
            CheckInt32(1221560047, "d0");
            
            // format d1
            CheckInt32(Int32.MinValue, "d1");
            CheckInt32(Int32.MaxValue, "d1");
            CheckInt32(0, "d1");
            CheckInt32(-545385363, "d1");
            CheckInt32(1165463809, "d1");
            CheckInt32(89011016, "d1");
            CheckInt32(1122241788, "d1");
            CheckInt32(9707225, "d1");
            
            // format d2
            CheckInt32(Int32.MinValue, "d2");
            CheckInt32(Int32.MaxValue, "d2");
            CheckInt32(0, "d2");
            CheckInt32(-231600718, "d2");
            CheckInt32(-663092655, "d2");
            CheckInt32(199595450, "d2");
            CheckInt32(1021229291, "d2");
            CheckInt32(-467881547, "d2");
            
            // format d3
            CheckInt32(Int32.MinValue, "d3");
            CheckInt32(Int32.MaxValue, "d3");
            CheckInt32(0, "d3");
            CheckInt32(-1326996518, "d3");
            CheckInt32(313421715, "d3");
            CheckInt32(-511477961, "d3");
            CheckInt32(-465875723, "d3");
            CheckInt32(15120585, "d3");
            
            // format d4
            CheckInt32(Int32.MinValue, "d4");
            CheckInt32(Int32.MaxValue, "d4");
            CheckInt32(0, "d4");
            CheckInt32(-747940869, "d4");
            CheckInt32(1710152922, "d4");
            CheckInt32(-98201572, "d4");
            CheckInt32(1884159028, "d4");
            CheckInt32(-789568559, "d4");
            
            // format d5
            CheckInt32(Int32.MinValue, "d5");
            CheckInt32(Int32.MaxValue, "d5");
            CheckInt32(0, "d5");
            CheckInt32(-953155526, "d5");
            CheckInt32(141541014, "d5");
            CheckInt32(381974773, "d5");
            CheckInt32(579690803, "d5");
            CheckInt32(-152803578, "d5");
        }
        
        [Fact]
        public void Int32FormatG()
        {
            
            // format G
            CheckInt32(Int32.MinValue, "G");
            CheckInt32(Int32.MaxValue, "G");
            CheckInt32(0, "G");
            CheckInt32(1198470865, "G");
            CheckInt32(1377336212, "G");
            CheckInt32(-1515722060, "G");
            CheckInt32(-1585060406, "G");
            CheckInt32(-376951322, "G");
        }
        
        [Fact]
        public void Int32FormatN()
        {
            
            // format N
            CheckInt32(Int32.MinValue, "N");
            CheckInt32(Int32.MaxValue, "N");
            CheckInt32(0, "N");
            CheckInt32(-980268592, "N");
            CheckInt32(-1942295651, "N");
            CheckInt32(1833446916, "N");
            CheckInt32(1166219437, "N");
            CheckInt32(-958470366, "N");
            
            // format N0
            CheckInt32(Int32.MinValue, "N0");
            CheckInt32(Int32.MaxValue, "N0");
            CheckInt32(0, "N0");
            CheckInt32(-1971937883, "N0");
            CheckInt32(-2116295237, "N0");
            CheckInt32(-414170218, "N0");
            CheckInt32(-765591165, "N0");
            CheckInt32(-1256078079, "N0");
            
            // format N1
            CheckInt32(Int32.MinValue, "N1");
            CheckInt32(Int32.MaxValue, "N1");
            CheckInt32(0, "N1");
            CheckInt32(-1935523599, "N1");
            CheckInt32(1729337841, "N1");
            CheckInt32(365413282, "N1");
            CheckInt32(538236184, "N1");
            CheckInt32(273857886, "N1");
            
            // format N2
            CheckInt32(Int32.MinValue, "N2");
            CheckInt32(Int32.MaxValue, "N2");
            CheckInt32(0, "N2");
            CheckInt32(207347103, "N2");
            CheckInt32(-1197939025, "N2");
            CheckInt32(965097791, "N2");
            CheckInt32(-677647574, "N2");
            CheckInt32(-117839682, "N2");
            
            // format N3
            CheckInt32(Int32.MinValue, "N3");
            CheckInt32(Int32.MaxValue, "N3");
            CheckInt32(0, "N3");
            CheckInt32(-1474636046, "N3");
            CheckInt32(1282523707, "N3");
            CheckInt32(2028197309, "N3");
            CheckInt32(1696218114, "N3");
            CheckInt32(-1587547741, "N3");
            
            // format N4
            CheckInt32(Int32.MinValue, "N4");
            CheckInt32(Int32.MaxValue, "N4");
            CheckInt32(0, "N4");
            CheckInt32(-1020145669, "N4");
            CheckInt32(-418816531, "N4");
            CheckInt32(-2080723962, "N4");
            CheckInt32(-1805729825, "N4");
            CheckInt32(-227893443, "N4");
            
            // format N5
            CheckInt32(Int32.MinValue, "N5");
            CheckInt32(Int32.MaxValue, "N5");
            CheckInt32(0, "N5");
            CheckInt32(-2072759429, "N5");
            CheckInt32(747138467, "N5");
            CheckInt32(-347324488, "N5");
            CheckInt32(395883572, "N5");
            CheckInt32(-1852384667, "N5");
        }
        
        [Fact]
        public void Int32FormatR()
        {
            
            // format R
            CheckInt32(Int32.MinValue, "R");
            CheckInt32(Int32.MaxValue, "R");
            CheckInt32(0, "R");
            CheckInt32(-176889372, "R");
            CheckInt32(-391779088, "R");
            CheckInt32(690953726, "R");
            CheckInt32(-1237325237, "R");
            CheckInt32(429239025, "R");
            
            // format R0
            CheckInt32(Int32.MinValue, "R0");
            CheckInt32(Int32.MaxValue, "R0");
            CheckInt32(0, "R0");
            CheckInt32(1681660342, "R0");
            CheckInt32(-268370878, "R0");
            CheckInt32(1587286366, "R0");
            CheckInt32(1937931540, "R0");
            CheckInt32(-1135047983, "R0");
            
            // format R1
            CheckInt32(Int32.MinValue, "R1");
            CheckInt32(Int32.MaxValue, "R1");
            CheckInt32(0, "R1");
            CheckInt32(2054808976, "R1");
            CheckInt32(1467824496, "R1");
            CheckInt32(-2140670678, "R1");
            CheckInt32(959039627, "R1");
            CheckInt32(-1398291149, "R1");
            
            // format R2
            CheckInt32(Int32.MinValue, "R2");
            CheckInt32(Int32.MaxValue, "R2");
            CheckInt32(0, "R2");
            CheckInt32(-1356248346, "R2");
            CheckInt32(1002436384, "R2");
            CheckInt32(-484295748, "R2");
            CheckInt32(-683662554, "R2");
            CheckInt32(1815375115, "R2");
            
            // format R3
            CheckInt32(Int32.MinValue, "R3");
            CheckInt32(Int32.MaxValue, "R3");
            CheckInt32(0, "R3");
            CheckInt32(-1518061708, "R3");
            CheckInt32(1203103933, "R3");
            CheckInt32(-1068875412, "R3");
            CheckInt32(1189413593, "R3");
            CheckInt32(-1058719259, "R3");
            
            // format R4
            CheckInt32(Int32.MinValue, "R4");
            CheckInt32(Int32.MaxValue, "R4");
            CheckInt32(0, "R4");
            CheckInt32(1972225563, "R4");
            CheckInt32(2060442606, "R4");
            CheckInt32(-941273382, "R4");
            CheckInt32(-1897016024, "R4");
            CheckInt32(1344428238, "R4");
            
            // format R5
            CheckInt32(Int32.MinValue, "R5");
            CheckInt32(Int32.MaxValue, "R5");
            CheckInt32(0, "R5");
            CheckInt32(-1417789522, "R5");
            CheckInt32(-732914711, "R5");
            CheckInt32(1552000315, "R5");
            CheckInt32(-975946046, "R5");
            CheckInt32(-1275860674, "R5");
        }
        
        [Fact]
        public void Int32FormatX()
        {
            
            // format X
            CheckInt32(Int32.MinValue, "X");
            CheckInt32(Int32.MaxValue, "X");
            CheckInt32(0, "X");
            CheckInt32(595726560, "X");
            CheckInt32(1171202357, "X");
            CheckInt32(986616438, "X");
            CheckInt32(2137167971, "X");
            CheckInt32(-593395813, "X");
            
            // format X0
            CheckInt32(Int32.MinValue, "X0");
            CheckInt32(Int32.MaxValue, "X0");
            CheckInt32(0, "X0");
            CheckInt32(-974921629, "X0");
            CheckInt32(1872766120, "X0");
            CheckInt32(-440781937, "X0");
            CheckInt32(735252213, "X0");
            CheckInt32(1945159295, "X0");
            
            // format X1
            CheckInt32(Int32.MinValue, "X1");
            CheckInt32(Int32.MaxValue, "X1");
            CheckInt32(0, "X1");
            CheckInt32(53256419, "X1");
            CheckInt32(2031740315, "X1");
            CheckInt32(-433588941, "X1");
            CheckInt32(-1089092907, "X1");
            CheckInt32(62611758, "X1");
            
            // format X2
            CheckInt32(Int32.MinValue, "X2");
            CheckInt32(Int32.MaxValue, "X2");
            CheckInt32(0, "X2");
            CheckInt32(1265914600, "X2");
            CheckInt32(-2006088674, "X2");
            CheckInt32(619692458, "X2");
            CheckInt32(-533071037, "X2");
            CheckInt32(508573727, "X2");
            
            // format X3
            CheckInt32(Int32.MinValue, "X3");
            CheckInt32(Int32.MaxValue, "X3");
            CheckInt32(0, "X3");
            CheckInt32(-1141900435, "X3");
            CheckInt32(-283595703, "X3");
            CheckInt32(1846664172, "X3");
            CheckInt32(-728041032, "X3");
            CheckInt32(1870416885, "X3");
            
            // format X4
            CheckInt32(Int32.MinValue, "X4");
            CheckInt32(Int32.MaxValue, "X4");
            CheckInt32(0, "X4");
            CheckInt32(-298196957, "X4");
            CheckInt32(-1879229847, "X4");
            CheckInt32(1731241151, "X4");
            CheckInt32(824989963, "X4");
            CheckInt32(-997564232, "X4");
            
            // format X5
            CheckInt32(Int32.MinValue, "X5");
            CheckInt32(Int32.MaxValue, "X5");
            CheckInt32(0, "X5");
            CheckInt32(-1291192107, "X5");
            CheckInt32(-1938084312, "X5");
            CheckInt32(780379076, "X5");
            CheckInt32(2113452552, "X5");
            CheckInt32(1710663314, "X5");
        }
        
        [Fact]
        public void Int32Formatx()
        {
            
            // format x
            CheckInt32(Int32.MinValue, "x");
            CheckInt32(Int32.MaxValue, "x");
            CheckInt32(0, "x");
            CheckInt32(-1266387565, "x");
            CheckInt32(1146156136, "x");
            CheckInt32(358294201, "x");
            CheckInt32(-1670558988, "x");
            CheckInt32(1442092436, "x");
            
            // format x0
            CheckInt32(Int32.MinValue, "x0");
            CheckInt32(Int32.MaxValue, "x0");
            CheckInt32(0, "x0");
            CheckInt32(336697171, "x0");
            CheckInt32(1316455520, "x0");
            CheckInt32(-1884712935, "x0");
            CheckInt32(-1928245551, "x0");
            CheckInt32(1837947826, "x0");
            
            // format x1
            CheckInt32(Int32.MinValue, "x1");
            CheckInt32(Int32.MaxValue, "x1");
            CheckInt32(0, "x1");
            CheckInt32(-437988969, "x1");
            CheckInt32(1779208854, "x1");
            CheckInt32(1564763558, "x1");
            CheckInt32(-105719292, "x1");
            CheckInt32(-665239133, "x1");
            
            // format x2
            CheckInt32(Int32.MinValue, "x2");
            CheckInt32(Int32.MaxValue, "x2");
            CheckInt32(0, "x2");
            CheckInt32(1627246682, "x2");
            CheckInt32(986862913, "x2");
            CheckInt32(633637801, "x2");
            CheckInt32(-322543691, "x2");
            CheckInt32(1564855481, "x2");
            
            // format x3
            CheckInt32(Int32.MinValue, "x3");
            CheckInt32(Int32.MaxValue, "x3");
            CheckInt32(0, "x3");
            CheckInt32(-1265980184, "x3");
            CheckInt32(735320604, "x3");
            CheckInt32(-1732664714, "x3");
            CheckInt32(1928807337, "x3");
            CheckInt32(-820740286, "x3");
            
            // format x4
            CheckInt32(Int32.MinValue, "x4");
            CheckInt32(Int32.MaxValue, "x4");
            CheckInt32(0, "x4");
            CheckInt32(1681651624, "x4");
            CheckInt32(760596608, "x4");
            CheckInt32(887297683, "x4");
            CheckInt32(-474237570, "x4");
            CheckInt32(1819407366, "x4");
            
            // format x5
            CheckInt32(Int32.MinValue, "x5");
            CheckInt32(Int32.MaxValue, "x5");
            CheckInt32(0, "x5");
            CheckInt32(51217176, "x5");
            CheckInt32(2068366623, "x5");
            CheckInt32(1508093960, "x5");
            CheckInt32(-1699671058, "x5");
            CheckInt32(-1823915888, "x5");
        }
        
        public void CheckUInt64(UInt64 value, string format)
        {
            var parsed = TextFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt64FormatD()
        {
            
            // format D
            CheckUInt64(UInt64.MinValue, "D");
            CheckUInt64(UInt64.MaxValue, "D");
            CheckUInt64(0, "D");
            CheckUInt64(1622154733, "D");
            CheckUInt64(1285702983, "D");
            CheckUInt64(665567153, "D");
            CheckUInt64(263643142, "D");
            CheckUInt64(712140403, "D");
            
            // format D0
            CheckUInt64(UInt64.MinValue, "D0");
            CheckUInt64(UInt64.MaxValue, "D0");
            CheckUInt64(0, "D0");
            CheckUInt64(199121111, "D0");
            CheckUInt64(1915304682, "D0");
            CheckUInt64(1769501622, "D0");
            CheckUInt64(1001514426, "D0");
            CheckUInt64(812621777, "D0");
            
            // format D1
            CheckUInt64(UInt64.MinValue, "D1");
            CheckUInt64(UInt64.MaxValue, "D1");
            CheckUInt64(0, "D1");
            CheckUInt64(262797530, "D1");
            CheckUInt64(625188668, "D1");
            CheckUInt64(1052369494, "D1");
            CheckUInt64(1829558476, "D1");
            CheckUInt64(850082668, "D1");
            
            // format D2
            CheckUInt64(UInt64.MinValue, "D2");
            CheckUInt64(UInt64.MaxValue, "D2");
            CheckUInt64(0, "D2");
            CheckUInt64(1744216765, "D2");
            CheckUInt64(1663867279, "D2");
            CheckUInt64(1254320184, "D2");
            CheckUInt64(1805316198, "D2");
            CheckUInt64(2017875526, "D2");
            
            // format D3
            CheckUInt64(UInt64.MinValue, "D3");
            CheckUInt64(UInt64.MaxValue, "D3");
            CheckUInt64(0, "D3");
            CheckUInt64(1865480258, "D3");
            CheckUInt64(1910566690, "D3");
            CheckUInt64(970618846, "D3");
            CheckUInt64(1250682501, "D3");
            CheckUInt64(1523087508, "D3");
            
            // format D4
            CheckUInt64(UInt64.MinValue, "D4");
            CheckUInt64(UInt64.MaxValue, "D4");
            CheckUInt64(0, "D4");
            CheckUInt64(1468530974, "D4");
            CheckUInt64(317984879, "D4");
            CheckUInt64(1824962461, "D4");
            CheckUInt64(649096919, "D4");
            CheckUInt64(1672947781, "D4");
            
            // format D5
            CheckUInt64(UInt64.MinValue, "D5");
            CheckUInt64(UInt64.MaxValue, "D5");
            CheckUInt64(0, "D5");
            CheckUInt64(1199954373, "D5");
            CheckUInt64(1157482052, "D5");
            CheckUInt64(1951582030, "D5");
            CheckUInt64(1275745177, "D5");
            CheckUInt64(1508493216, "D5");
        }
        
        [Fact]
        public void UInt64Formatd()
        {
            
            // format d
            CheckUInt64(UInt64.MinValue, "d");
            CheckUInt64(UInt64.MaxValue, "d");
            CheckUInt64(0, "d");
            CheckUInt64(395948642, "d");
            CheckUInt64(1364946412, "d");
            CheckUInt64(496953467, "d");
            CheckUInt64(1167885974, "d");
            CheckUInt64(688176573, "d");
            
            // format d0
            CheckUInt64(UInt64.MinValue, "d0");
            CheckUInt64(UInt64.MaxValue, "d0");
            CheckUInt64(0, "d0");
            CheckUInt64(995424888, "d0");
            CheckUInt64(852219593, "d0");
            CheckUInt64(1705429867, "d0");
            CheckUInt64(1006785590, "d0");
            CheckUInt64(51375451, "d0");
            
            // format d1
            CheckUInt64(UInt64.MinValue, "d1");
            CheckUInt64(UInt64.MaxValue, "d1");
            CheckUInt64(0, "d1");
            CheckUInt64(1573512156, "d1");
            CheckUInt64(892563361, "d1");
            CheckUInt64(238808148, "d1");
            CheckUInt64(207759123, "d1");
            CheckUInt64(1911360843, "d1");
            
            // format d2
            CheckUInt64(UInt64.MinValue, "d2");
            CheckUInt64(UInt64.MaxValue, "d2");
            CheckUInt64(0, "d2");
            CheckUInt64(543333299, "d2");
            CheckUInt64(445350872, "d2");
            CheckUInt64(1113492735, "d2");
            CheckUInt64(1953524007, "d2");
            CheckUInt64(1974482143, "d2");
            
            // format d3
            CheckUInt64(UInt64.MinValue, "d3");
            CheckUInt64(UInt64.MaxValue, "d3");
            CheckUInt64(0, "d3");
            CheckUInt64(1859071690, "d3");
            CheckUInt64(315084137, "d3");
            CheckUInt64(1562368299, "d3");
            CheckUInt64(888039281, "d3");
            CheckUInt64(1391093076, "d3");
            
            // format d4
            CheckUInt64(UInt64.MinValue, "d4");
            CheckUInt64(UInt64.MaxValue, "d4");
            CheckUInt64(0, "d4");
            CheckUInt64(2028619879, "d4");
            CheckUInt64(90342221, "d4");
            CheckUInt64(1120404703, "d4");
            CheckUInt64(1476050292, "d4");
            CheckUInt64(1760151051, "d4");
            
            // format d5
            CheckUInt64(UInt64.MinValue, "d5");
            CheckUInt64(UInt64.MaxValue, "d5");
            CheckUInt64(0, "d5");
            CheckUInt64(1252799125, "d5");
            CheckUInt64(821090285, "d5");
            CheckUInt64(1924107964, "d5");
            CheckUInt64(321065260, "d5");
            CheckUInt64(454134026, "d5");
        }
        
        [Fact]
        public void UInt64FormatG()
        {
            
            // format G
            CheckUInt64(UInt64.MinValue, "G");
            CheckUInt64(UInt64.MaxValue, "G");
            CheckUInt64(0, "G");
            CheckUInt64(379270353, "G");
            CheckUInt64(1166913812, "G");
            CheckUInt64(86434210, "G");
            CheckUInt64(1117139625, "G");
            CheckUInt64(1022450638, "G");
        }
        
        [Fact]
        public void UInt64FormatN()
        {
            
            // format N
            CheckUInt64(UInt64.MinValue, "N");
            CheckUInt64(UInt64.MaxValue, "N");
            CheckUInt64(0, "N");
            CheckUInt64(1013260665, "N");
            CheckUInt64(205136823, "N");
            CheckUInt64(2111316903, "N");
            CheckUInt64(1199307050, "N");
            CheckUInt64(2097058999, "N");
            
            // format N0
            CheckUInt64(UInt64.MinValue, "N0");
            CheckUInt64(UInt64.MaxValue, "N0");
            CheckUInt64(0, "N0");
            CheckUInt64(575967613, "N0");
            CheckUInt64(79176731, "N0");
            CheckUInt64(1617203338, "N0");
            CheckUInt64(885219723, "N0");
            CheckUInt64(1129614482, "N0");
            
            // format N1
            CheckUInt64(UInt64.MinValue, "N1");
            CheckUInt64(UInt64.MaxValue, "N1");
            CheckUInt64(0, "N1");
            CheckUInt64(754603501, "N1");
            CheckUInt64(43989317, "N1");
            CheckUInt64(2145541670, "N1");
            CheckUInt64(1448746681, "N1");
            CheckUInt64(1796905173, "N1");
            
            // format N2
            CheckUInt64(UInt64.MinValue, "N2");
            CheckUInt64(UInt64.MaxValue, "N2");
            CheckUInt64(0, "N2");
            CheckUInt64(80864505, "N2");
            CheckUInt64(1950061760, "N2");
            CheckUInt64(1756397833, "N2");
            CheckUInt64(1924276545, "N2");
            CheckUInt64(807040341, "N2");
            
            // format N3
            CheckUInt64(UInt64.MinValue, "N3");
            CheckUInt64(UInt64.MaxValue, "N3");
            CheckUInt64(0, "N3");
            CheckUInt64(905082667, "N3");
            CheckUInt64(1879298537, "N3");
            CheckUInt64(229379575, "N3");
            CheckUInt64(1394118186, "N3");
            CheckUInt64(946059973, "N3");
            
            // format N4
            CheckUInt64(UInt64.MinValue, "N4");
            CheckUInt64(UInt64.MaxValue, "N4");
            CheckUInt64(0, "N4");
            CheckUInt64(752421871, "N4");
            CheckUInt64(1115939044, "N4");
            CheckUInt64(2065226535, "N4");
            CheckUInt64(1901108744, "N4");
            CheckUInt64(1532090490, "N4");
            
            // format N5
            CheckUInt64(UInt64.MinValue, "N5");
            CheckUInt64(UInt64.MaxValue, "N5");
            CheckUInt64(0, "N5");
            CheckUInt64(1523903134, "N5");
            CheckUInt64(358916662, "N5");
            CheckUInt64(2143836757, "N5");
            CheckUInt64(931073369, "N5");
            CheckUInt64(961221478, "N5");
        }
        
        [Fact]
        public void UInt64FormatR()
        {
            
            // format R
            CheckUInt64(UInt64.MinValue, "R");
            CheckUInt64(UInt64.MaxValue, "R");
            CheckUInt64(0, "R");
            CheckUInt64(1653934867, "R");
            CheckUInt64(351250881, "R");
            CheckUInt64(363061249, "R");
            CheckUInt64(938463929, "R");
            CheckUInt64(815125463, "R");
            
            // format R0
            CheckUInt64(UInt64.MinValue, "R0");
            CheckUInt64(UInt64.MaxValue, "R0");
            CheckUInt64(0, "R0");
            CheckUInt64(1949443148, "R0");
            CheckUInt64(620622530, "R0");
            CheckUInt64(235184980, "R0");
            CheckUInt64(346435810, "R0");
            CheckUInt64(1005547550, "R0");
            
            // format R1
            CheckUInt64(UInt64.MinValue, "R1");
            CheckUInt64(UInt64.MaxValue, "R1");
            CheckUInt64(0, "R1");
            CheckUInt64(1208809808, "R1");
            CheckUInt64(823032262, "R1");
            CheckUInt64(475361283, "R1");
            CheckUInt64(671643734, "R1");
            CheckUInt64(373269521, "R1");
            
            // format R2
            CheckUInt64(UInt64.MinValue, "R2");
            CheckUInt64(UInt64.MaxValue, "R2");
            CheckUInt64(0, "R2");
            CheckUInt64(576692240, "R2");
            CheckUInt64(1557999626, "R2");
            CheckUInt64(309641312, "R2");
            CheckUInt64(310099284, "R2");
            CheckUInt64(117367971, "R2");
            
            // format R3
            CheckUInt64(UInt64.MinValue, "R3");
            CheckUInt64(UInt64.MaxValue, "R3");
            CheckUInt64(0, "R3");
            CheckUInt64(1281445775, "R3");
            CheckUInt64(2123240895, "R3");
            CheckUInt64(717198717, "R3");
            CheckUInt64(253247077, "R3");
            CheckUInt64(1344637128, "R3");
            
            // format R4
            CheckUInt64(UInt64.MinValue, "R4");
            CheckUInt64(UInt64.MaxValue, "R4");
            CheckUInt64(0, "R4");
            CheckUInt64(1607512216, "R4");
            CheckUInt64(161433843, "R4");
            CheckUInt64(1863578241, "R4");
            CheckUInt64(1500612880, "R4");
            CheckUInt64(1753194995, "R4");
            
            // format R5
            CheckUInt64(UInt64.MinValue, "R5");
            CheckUInt64(UInt64.MaxValue, "R5");
            CheckUInt64(0, "R5");
            CheckUInt64(395686839, "R5");
            CheckUInt64(47636207, "R5");
            CheckUInt64(1214468301, "R5");
            CheckUInt64(487525203, "R5");
            CheckUInt64(142970306, "R5");
        }
        
        [Fact]
        public void UInt64FormatX()
        {
            
            // format X
            CheckUInt64(UInt64.MinValue, "X");
            CheckUInt64(UInt64.MaxValue, "X");
            CheckUInt64(0, "X");
            CheckUInt64(1877097271, "X");
            CheckUInt64(1587000511, "X");
            CheckUInt64(817933904, "X");
            CheckUInt64(1109151082, "X");
            CheckUInt64(1005080840, "X");
            
            // format X0
            CheckUInt64(UInt64.MinValue, "X0");
            CheckUInt64(UInt64.MaxValue, "X0");
            CheckUInt64(0, "X0");
            CheckUInt64(284460137, "X0");
            CheckUInt64(1644113557, "X0");
            CheckUInt64(2030427412, "X0");
            CheckUInt64(388570636, "X0");
            CheckUInt64(1884733812, "X0");
            
            // format X1
            CheckUInt64(UInt64.MinValue, "X1");
            CheckUInt64(UInt64.MaxValue, "X1");
            CheckUInt64(0, "X1");
            CheckUInt64(2076873256, "X1");
            CheckUInt64(640577761, "X1");
            CheckUInt64(1393582801, "X1");
            CheckUInt64(1527839223, "X1");
            CheckUInt64(955398250, "X1");
            
            // format X2
            CheckUInt64(UInt64.MinValue, "X2");
            CheckUInt64(UInt64.MaxValue, "X2");
            CheckUInt64(0, "X2");
            CheckUInt64(2113387155, "X2");
            CheckUInt64(49275350, "X2");
            CheckUInt64(1833737473, "X2");
            CheckUInt64(813705398, "X2");
            CheckUInt64(1827259350, "X2");
            
            // format X3
            CheckUInt64(UInt64.MinValue, "X3");
            CheckUInt64(UInt64.MaxValue, "X3");
            CheckUInt64(0, "X3");
            CheckUInt64(1678177619, "X3");
            CheckUInt64(1781535811, "X3");
            CheckUInt64(109814172, "X3");
            CheckUInt64(1741310448, "X3");
            CheckUInt64(1355096894, "X3");
            
            // format X4
            CheckUInt64(UInt64.MinValue, "X4");
            CheckUInt64(UInt64.MaxValue, "X4");
            CheckUInt64(0, "X4");
            CheckUInt64(1788009305, "X4");
            CheckUInt64(904527936, "X4");
            CheckUInt64(882055747, "X4");
            CheckUInt64(740724462, "X4");
            CheckUInt64(609860711, "X4");
            
            // format X5
            CheckUInt64(UInt64.MinValue, "X5");
            CheckUInt64(UInt64.MaxValue, "X5");
            CheckUInt64(0, "X5");
            CheckUInt64(1161173601, "X5");
            CheckUInt64(1756047608, "X5");
            CheckUInt64(2135319727, "X5");
            CheckUInt64(528673428, "X5");
            CheckUInt64(643655897, "X5");
        }
        
        [Fact]
        public void UInt64Formatx()
        {
            
            // format x
            CheckUInt64(UInt64.MinValue, "x");
            CheckUInt64(UInt64.MaxValue, "x");
            CheckUInt64(0, "x");
            CheckUInt64(1137175376, "x");
            CheckUInt64(740065722, "x");
            CheckUInt64(1347973877, "x");
            CheckUInt64(1452502091, "x");
            CheckUInt64(1980391481, "x");
            
            // format x0
            CheckUInt64(UInt64.MinValue, "x0");
            CheckUInt64(UInt64.MaxValue, "x0");
            CheckUInt64(0, "x0");
            CheckUInt64(1784815865, "x0");
            CheckUInt64(92813483, "x0");
            CheckUInt64(328628081, "x0");
            CheckUInt64(515996912, "x0");
            CheckUInt64(1415247519, "x0");
            
            // format x1
            CheckUInt64(UInt64.MinValue, "x1");
            CheckUInt64(UInt64.MaxValue, "x1");
            CheckUInt64(0, "x1");
            CheckUInt64(966934455, "x1");
            CheckUInt64(915334689, "x1");
            CheckUInt64(335739018, "x1");
            CheckUInt64(545214630, "x1");
            CheckUInt64(1787291487, "x1");
            
            // format x2
            CheckUInt64(UInt64.MinValue, "x2");
            CheckUInt64(UInt64.MaxValue, "x2");
            CheckUInt64(0, "x2");
            CheckUInt64(346411489, "x2");
            CheckUInt64(361382381, "x2");
            CheckUInt64(400762903, "x2");
            CheckUInt64(807749500, "x2");
            CheckUInt64(612276334, "x2");
            
            // format x3
            CheckUInt64(UInt64.MinValue, "x3");
            CheckUInt64(UInt64.MaxValue, "x3");
            CheckUInt64(0, "x3");
            CheckUInt64(95561460, "x3");
            CheckUInt64(1477186339, "x3");
            CheckUInt64(1224107103, "x3");
            CheckUInt64(1901537835, "x3");
            CheckUInt64(1364